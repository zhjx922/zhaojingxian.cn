<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhjx922 De Blog</title>
  <subtitle>学习、成长、记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaojingxian.cn/"/>
  <updated>2017-02-27T15:31:07.000Z</updated>
  <id>https://zhaojingxian.cn/</id>
  
  <author>
    <name>zhjx922</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>加密算法之非对称加密</title>
    <link href="https://zhaojingxian.cn/2017/02/27/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B9%8B%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>https://zhaojingxian.cn/2017/02/27/加密算法之非对称加密/</id>
    <published>2017-02-27T12:25:29.000Z</published>
    <updated>2017-02-27T15:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>上篇文章介绍了对称加密的原理，但是它的最大问题就是加密和解密的密钥是相同的，并且不能保证密钥能安全的送到双方手里，即使安全的送到双方手里，免不了内部会有”卧底”的存在</p>
</blockquote>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>既然有对称加密，那么自然会联想到非对称加密。非对称加密的核心在于加密和解密使用的是不同的密钥，如何做到使用不同的密钥呢？<br>比如我有一个只能用钥匙打开的存钱罐，平时大家只能把零钱放到储钱罐中，但是只有我才有取钱的钥匙。放到储钱罐的硬币可以看成加密后的内容，而只有用钥匙才能将”加密”后的硬币取出来。<br>这样我们就可以把用来加密的密钥(公钥)给了任何人，我们只要自己保存好解密的密钥(私钥)就可以安全的保护我们的数据。<br>非对称算法有很多:RSA、Elgamal、背包算法、Rabin、D-H、ECC等，下面我们来简单介绍一下RSA算法。</p>
<h3 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h3><p>RSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。1987年首次公布，当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的(啥时候以我名字命名一个呢)。<br>RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，已被ISO推荐为公钥数据加密标准。</p>
<h3 id="RSA加密-amp-amp-RSA解密公式"><a href="#RSA加密-amp-amp-RSA解密公式" class="headerlink" title="RSA加密&amp;&amp;RSA解密公式"></a>RSA加密&amp;&amp;RSA解密公式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//注意：明文为数字，实际计算过程我们可以通过ASCII码转换</div><div class="line">密文 = (明文 ^ E) % N; //其中的E和N就是我们的公钥</div><div class="line"></div><div class="line">明文 = (密文 ^ D) % N; //其中的D和N就是我们的私钥</div></pre></td></tr></table></figure>
<h3 id="计算公钥-E-、私钥-D-和数字-N"><a href="#计算公钥-E-、私钥-D-和数字-N" class="headerlink" title="计算公钥(E)、私钥(D)和数字(N)"></a>计算公钥(E)、私钥(D)和数字(N)</h3><p>公钥和私钥不是随便弄几个数字就可以的，是经过严格的数学公式计算出来的。</p>
<h4 id="1、随机准备两个质数P和Q-计算乘积得到N"><a href="#1、随机准备两个质数P和Q-计算乘积得到N" class="headerlink" title="1、随机准备两个质数P和Q,计算乘积得到N"></a>1、随机准备两个质数P和Q,计算乘积得到N</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">N = P * Q;</div></pre></td></tr></table></figure>
<h4 id="2、计算L"><a href="#2、计算L" class="headerlink" title="2、计算L"></a>2、计算L</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">L = (P - 1) * (Q - 1); //图解密码技术中说需要计算乘积之后的最小公倍数，但是经过代码测试并不准确，哪位大侠了解麻烦留言告知一下~</div></pre></td></tr></table></figure>
<h4 id="3、计算E-公钥-，用来给加密方使用"><a href="#3、计算E-公钥-，用来给加密方使用" class="headerlink" title="3、计算E(公钥)，用来给加密方使用"></a>3、计算E(公钥)，用来给加密方使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//E需要同时满足下面两个条件</div><div class="line">1. 1 &lt; E &lt; L</div><div class="line">2. E和L的最大公约数为一(欧几里得算法，这些恶魔啊，E和L必须互质，这样才能保证一定可以计算出私钥D)</div></pre></td></tr></table></figure>
<h4 id="4、计算D-私钥-，用来给解密方使用"><a href="#4、计算D-私钥-，用来给解密方使用" class="headerlink" title="4、计算D(私钥)，用来给解密方使用"></a>4、计算D(私钥)，用来给解密方使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//D需要满足下面公式</div><div class="line">(E * D) % L = 1; //想要保证结果为1，E和L必须互质!!!</div></pre></td></tr></table></figure>
<p>上面就是整个计算过程，为了保证数据的安全现实中，P和Q会选用特别大的数(1024比特或者更大)</p>
<h3 id="RSA的加密和解密"><a href="#RSA的加密和解密" class="headerlink" title="RSA的加密和解密"></a>RSA的加密和解密</h3><p>上面已经提到过加密和解密的方法，我们用具体的数字实践一下，加深理解吧。</p>
<h4 id="1、求N-P-Q"><a href="#1、求N-P-Q" class="headerlink" title="1、求N(P*Q)"></a>1、求N(P*Q)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">假设:P = 7、Q = 11(均为质数)</div><div class="line">那么:N = P * Q = 7 * 11 = 77</div></pre></td></tr></table></figure>
<h4 id="2、求L-P-1-Q-1"><a href="#2、求L-P-1-Q-1" class="headerlink" title="2、求L ((P - 1) * (Q - 1))"></a>2、求L ((P - 1) * (Q - 1))</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">L = (P - 1) * (Q - 1) = 6 * 10 = 60</div></pre></td></tr></table></figure>
<h4 id="3、求E"><a href="#3、求E" class="headerlink" title="3、求E"></a>3、求E</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 &lt; E &lt; 60</div><div class="line">E和L的最大公约数为一，我们假设E=23</div></pre></td></tr></table></figure>
<h4 id="4、计算D-E-D-L-1"><a href="#4、计算D-E-D-L-1" class="headerlink" title="4、计算D ((E * D) % L = 1)"></a>4、计算D ((E * D) % L = 1)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(23 * D) % 60 = 1;</div><div class="line">D = 47;</div></pre></td></tr></table></figure>
<p>那么我就得到了公钥(E=23,N=77),私钥(D=47,N=77)</p>
<h4 id="加密-amp-amp-解密"><a href="#加密-amp-amp-解密" class="headerlink" title="加密&amp;&amp;解密"></a>加密&amp;&amp;解密</h4><p>我们假设需要加密数字:12<br>公式:密文 = (明文 ^ E) % N;<br>12 ^ 23 % 77 = 6624737266949237011120128 % 77 = 45;<br>这个45就是我们加密后的密文</p>
<p>解密<br>公式:明文 = (密文 ^ D) % N;<br>45 ^ 47 % 77 = 502328880013965819626664594350710696732674427522624682751484215259552001953125 % 77 = 12;<br>得出原文:12</p>
<h3 id="PHP示例"><a href="#PHP示例" class="headerlink" title="PHP示例"></a>PHP示例</h3><p>下面是我用PHP实现的加密&amp;解密示例，供大家参考(因为指数运算的结果集会很大，我们必须使用PHP中提供的BC Math系列函数计算)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 冒牌RSA算法</div><div class="line"> * <span class="doctag">@author</span> zhjx922</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断数字是否为质数</div><div class="line"> * <span class="doctag">@param</span> $num</div><div class="line"> * <span class="doctag">@return</span> bool</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrimeNumber</span><span class="params">($num)</span> </span>&#123;</div><div class="line">    $k = <span class="number">0</span>;<span class="comment">//定义次数变量</span></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= $num; $i++) &#123;</div><div class="line">        <span class="keyword">if</span> (bcmod($num, $i) == <span class="number">0</span>) &#123;</div><div class="line">            $k++;<span class="comment">//如果取模等于0，次数k自加</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($k == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//求最小公倍数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">minMultiple</span><span class="params">($a, $b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>($b==<span class="number">0</span>)     <span class="comment">//一定要考虑除数不能为零</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> $b;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $m = bccomp($a, $b) == <span class="number">1</span> ? $a : $b;</div><div class="line">        $n = bccomp($b, $a) == <span class="number">1</span> ? $b : $a;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>($i=<span class="number">2</span>; ; $i++)</div><div class="line">        &#123;</div><div class="line">            $mul = bcmul($m, $i);</div><div class="line">            <span class="keyword">if</span>(bcmod($mul, $n) == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> $mul;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bcmul($a, $b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//求最大公约数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxDivisor</span><span class="params">($a,$b)</span></span></div><div class="line">&#123;</div><div class="line">    $n = bccomp($a, $b) == <span class="number">1</span> ? $b : $a;</div><div class="line">    <span class="keyword">for</span>($i = $n; $i&gt;<span class="number">1</span>; $i--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(bcmod($a, $i) == <span class="number">0</span> &amp;&amp; bcmod($b, $i) == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> $i;   <span class="comment">//此处如果用echo $i;则输出结果为432；故应区分echo、return的区别</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">    <span class="comment">//随机一个质数P</span></div><div class="line">    $p = mt_rand(<span class="number">101</span>, <span class="number">197</span>);</div><div class="line">&#125; <span class="keyword">while</span>(!isPrimeNumber($p));</div><div class="line"></div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">    <span class="comment">//随机一个质数Q</span></div><div class="line">    $q = mt_rand(<span class="number">101</span>, <span class="number">197</span>);</div><div class="line">&#125; <span class="keyword">while</span>(!isPrimeNumber($q));</div><div class="line"></div><div class="line"></div><div class="line">$n = bcmul($p, $q);</div><div class="line"></div><div class="line"><span class="comment">//$l = minMultiple($p - 1, $q - 1); //经测试不可用</span></div><div class="line">$l = bcmul($p - <span class="number">1</span>, $q - <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    $e = mt_rand(<span class="number">2</span>, $l - <span class="number">1</span>);</div><div class="line">&#125;<span class="keyword">while</span>(maxDivisor($e, $l) != <span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">$d = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(bcmod(bcmul($e,++$d), $l) != <span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">'p:'</span> . $p . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">'q:'</span> . $q . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">'n:'</span> . $n . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">'l:'</span> . $l . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">'e:'</span> . $e . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">'d:'</span> . $d . PHP_EOL;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"公钥:e=&#123;$e&#125;,n=&#123;$n&#125;"</span> . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">"私钥:d=&#123;$d&#125;,n=&#123;$n&#125;"</span> . PHP_EOL;</div><div class="line"></div><div class="line"><span class="comment">//加密</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">($e, $n, $string)</span> </span>&#123;</div><div class="line">    $enString = <span class="string">''</span>;</div><div class="line">    $len = strlen($string);</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $len; $i++) &#123;</div><div class="line">        $pow = bcpow(ord($string&#123;$i&#125;), $e);</div><div class="line">        $mod = bcmod($pow, $n);</div><div class="line">        $enString .= pack(<span class="string">'L'</span>, $mod);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $enString;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//解密</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span><span class="params">($d, $n, $string)</span> </span>&#123;</div><div class="line">    $deString = <span class="string">''</span>;</div><div class="line">    $string = unpack(<span class="string">'L*'</span>, $string);</div><div class="line">    $len = count($string);</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">1</span>; $i &lt;= $len; $i++) &#123;</div><div class="line">        $pow = bcpow($string[$i], $d);</div><div class="line">        $mod = bcmod($pow, $n);</div><div class="line">        $deString .= chr($mod);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $deString;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">$startTime = microtime(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">$string = <span class="string">'欢迎关注"假装是个程序员"公众号'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"原文:"</span> . $string . PHP_EOL;</div><div class="line"></div><div class="line">$encodeString = encode($e, $n, $string);</div><div class="line"><span class="keyword">echo</span> <span class="string">"密文:"</span> . $encodeString . PHP_EOL;</div><div class="line"></div><div class="line">$decodeString = decode($d, $n, $encodeString);</div><div class="line"><span class="keyword">echo</span> <span class="string">"解密后:"</span> . $decodeString . PHP_EOL;</div><div class="line"></div><div class="line"></div><div class="line">$endTime = microtime(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"Total:"</span> . ($endTime - $startTime) . <span class="string">'s.'</span> . PHP_EOL;</div></pre></td></tr></table></figure>
<h3 id="没有绝对安全的加密方式"><a href="#没有绝对安全的加密方式" class="headerlink" title="没有绝对安全的加密方式"></a>没有绝对安全的加密方式</h3><p>没有什么加密方式能一直保持绝对的安全，尤其常用的MD5，如果你的数据库中密码还是使用MD5的哈希结果不要笑话人家直接用明文存密码的人，五十步笑百步而已。。。<br>最近谷歌宣布破解了SHA-1，随着计算能力的提高，SHA-256，RSA等等也是迟早的事儿。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上篇文章介绍了对称加密的原理，但是它的最大问题就是加密和解密的密钥是相同的，并且不能保证密钥能安全的送到双方手里，即使安全的送到双方手里，免不了内部会有”卧底”的存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;非对称加密&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="加密算法" scheme="https://zhaojingxian.cn/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="加密算法" scheme="https://zhaojingxian.cn/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
      <category term="对称加密" scheme="https://zhaojingxian.cn/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
      <category term="RSA" scheme="https://zhaojingxian.cn/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>加密算法之对称加密</title>
    <link href="https://zhaojingxian.cn/2017/02/19/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B9%8B%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>https://zhaojingxian.cn/2017/02/19/加密算法之对称加密/</id>
    <published>2017-02-19T15:38:22.000Z</published>
    <updated>2017-02-22T15:59:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在互联网如此发达的年代，信息的安全也变得越来越重要，我们也使用了各式各样的加密手段来保护数据的安全，但是各种加密算法你真的了解它么？他们的原理又是什么呢？<br>常见的加密分为对称加密、非对称加密还有散列算法(严格来说，散列不算加密)，这篇文章我们来了解一下对称加密</p>
</blockquote>
<h3 id="传递甜甜蜜蜜小纸条"><a href="#传递甜甜蜜蜜小纸条" class="headerlink" title="传递甜甜蜜蜜小纸条"></a>传递甜甜蜜蜜小纸条</h3><p>穿越到初中的你，凭借着程序员”高贵”的气息成功的和一个小女生”勾搭”上了。<br>然而在那个不是谁都有手机的年代，上课的时候想和她传递信息，貌似只能写在纸上，然后借助同学之手，慢慢传递。最关键的是，万一某个同学好奇心太重偷偷看到你们的”甜甜蜜蜜”，你也许会不太爽吧？<br>作为一个从未来穿越回来的程序员，你立马在周末的时候买了两本班上谁都没有的大字典(康熙字典)，从此你俩的小纸条上出现的是如下的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">123:5 564:3 11:8</div><div class="line"></div><div class="line">665:2 123:3 456:6 789:2...</div></pre></td></tr></table></figure>
<p><strong><em>123(代表页码):5(代表行)</em></strong></p>
<p>从此之后，妹子再也不理你了(查字典太TM麻烦！)。。。<br>当然藏头诗也可以看做一种加密手段，前提是：你会写诗。。。</p>
<h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>对称加密简单来说就是使用<code>同一密钥</code>加密和解密内容，双方使用的密钥必须是相同的(其他任何人都不知道)，这样才能保证内容的安全(正如上面的传递小纸条)。<br>常见的对称加密算法有DES、3DES、AES、Blowfish等，它们的复杂程度也各不相等。<br>那么在计算机中如何做到类似上面小纸条的加密手段呢？</p>
<h3 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h3><p>ASCII大家应该都熟悉，通过7位或者8位来表示一个字符，比如<code>65</code>表示字符<code>A</code>，<code>66</code>表示字符<code>B</code>，对应的二进制形式为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">二进制形式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">01000001</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">01000010</td>
</tr>
</tbody>
</table>
<h3 id="异或运算的特性"><a href="#异或运算的特性" class="headerlink" title="异或运算的特性"></a>异或运算的特性</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span> ^ <span class="number">0</span> = <span class="number">0</span>;</div><div class="line"><span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span>;</div><div class="line"><span class="number">1</span> ^ <span class="number">0</span> = <span class="number">1</span>;</div><div class="line"><span class="number">1</span> ^ <span class="number">1</span> = <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>相同异或等于0，不同为1，然后我们把<code>^</code>和<code>=</code>对换一下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span> = <span class="number">0</span> ^ <span class="number">0</span>;</div><div class="line"><span class="number">0</span> = <span class="number">1</span> ^ <span class="number">1</span>;</div><div class="line"><span class="number">1</span> = <span class="number">0</span> ^ <span class="number">1</span>;</div><div class="line"><span class="number">1</span> = <span class="number">1</span> ^ <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>依然成立，为了更形象的说明，我们把上面的等式假设为：<code>A ^ B = C</code><br>我们只要把结果C与B进行异或运算就会得到结果A，对称加密的精髓就在这里！</p>
<h3 id="PHP实现一个最简单的对称加密算法"><a href="#PHP实现一个最简单的对称加密算法" class="headerlink" title="PHP实现一个最简单的对称加密算法"></a>PHP实现一个最简单的对称加密算法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是我们的加密key</span></div><div class="line">$key = <span class="string">'[Lvn[o]6e&#123;y=q#82]G.]rDzv.j'</span>;</div><div class="line">$keyLen = strlen($key);</div><div class="line"></div><div class="line"><span class="comment">//准备加密的内容</span></div><div class="line">$string = <span class="string">'大家好，欢迎关注假装是个程序员！'</span>;</div><div class="line"></div><div class="line"><span class="comment">//被加密的内容长度</span></div><div class="line">$stringLen = strlen($string);</div><div class="line"></div><div class="line"><span class="comment">//如果加密key没有内容长，那么我们不断重复key，直到大于等于被加密内容(当然在实际使用中，这不是个好方法)</span></div><div class="line"><span class="keyword">if</span>($keyLen &lt; $stringLen) &#123;</div><div class="line">    $key = str_pad($key, $stringLen, $key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$content = <span class="string">''</span>;</div><div class="line"><span class="comment">//每个字节与对应的key做异或运算</span></div><div class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $stringLen; $i++) &#123;</div><div class="line">    $content .= chr(ord($string[$i]) ^ ord($key[$i]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//这个就是我们加密后的密文</span></div><div class="line">var_dump($content);</div><div class="line"><span class="comment">//输出:string(48) "��ы�ٸ�ؔű��������������ܤ������ў��Ƃ��ֶ���"</span></div><div class="line"></div><div class="line"><span class="comment">//为了提高可读性，一般会将加密后的字符通过base64编码</span></div><div class="line">var_dump(base64_encode($content));</div><div class="line"><span class="comment">//输出:string(64) "vujRi/XZuJPYlMWxl4+a2uLJy9jBosney+vcpNXrvffy0t3RnpX6xoK9uNa2ss7F"</span></div><div class="line"></div><div class="line"><span class="comment">//解密</span></div><div class="line">$string = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $stringLen; $i++) &#123;</div><div class="line">    $string .= chr(ord($content[$i]) ^ ord($key[$i]));</div><div class="line">&#125;</div><div class="line"></div><div class="line">var_dump($string);</div><div class="line"><span class="comment">//输出:string(48) "大家好，欢迎关注假装是个程序员！"</span></div></pre></td></tr></table></figure>
<p>上面的加密和解密其实是完全一样的算法，我这里只是为了演示，重复了一遍。<br>就这样我们轻轻松松就把我们的数据加密了，那么文件可以通过这种方式加密吗？当然可以，毕竟计算机里面储存的都是比特位，我下面给做一个简单的例子看一下。</p>
<h3 id="加密一张图片"><a href="#加密一张图片" class="headerlink" title="加密一张图片"></a>加密一张图片</h3><p><img src="/2017/02/19/加密算法之对称加密/jiami.jpg" alt="加密前的图片"></p>
<p>这个是加密前的图片</p>
<p><img src="/2017/02/19/加密算法之对称加密/jiami2.jpg" alt="加密key"></p>
<p>这张图用来做加密key</p>
<p>加密算法几乎和上面一致：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$file = <span class="string">'/Users/zhjx922/Downloads/jiami.jpg'</span>;</div><div class="line">$string = file_get_contents($file);</div><div class="line"><span class="comment">//被加密内容长度</span></div><div class="line">$stringLen = strlen($string);</div><div class="line"></div><div class="line">$file = <span class="string">'/Users/zhjx922/Downloads/jiami2.jpg'</span>;</div><div class="line">$key = file_get_contents($file);</div><div class="line"><span class="comment">//key长度</span></div><div class="line">$keyLen = strlen($key);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//如果加密key没有内容长，那么我们不断重复key，直到大于等于被加密内容(当然在实际使用中，这不是个好方法)</span></div><div class="line"><span class="keyword">if</span>($keyLen &lt; $stringLen) &#123;</div><div class="line">    $key = str_pad($key, $stringLen, $key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$content = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $stringLen; $i++) &#123;</div><div class="line">    $content .= chr(ord($string[$i]) ^ ord($key[$i]));</div><div class="line">&#125;</div><div class="line"></div><div class="line">file_put_contents(<span class="string">'jiami_content.jpg'</span>, $content);</div><div class="line"></div><div class="line">$string = file_get_contents(<span class="string">'jiami_content.jpg'</span>);</div><div class="line"></div><div class="line">$content = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $stringLen; $i++) &#123;</div><div class="line">    $content .= chr(ord($string[$i]) ^ ord($key[$i]));</div><div class="line">&#125;</div><div class="line"></div><div class="line">file_put_contents(<span class="string">'jiami_yuantu.jpg'</span>, $content);</div></pre></td></tr></table></figure>
<p>其中<code>jiami_content.jpg</code>为加密后的图片，但是根本打不开，这也说明这不是一个好的加密方法(因为不太了解jpg格式是如何储存的，如果你了解jpg的结构，调整算法，应该可以输出一张和原图完全不一样的图片)<br>而<code>jiami_yuantu.jpg</code>为解密后的图片，可以打开，完全和原图一样。</p>
<h3 id="关于DES-3DES、AES等算法"><a href="#关于DES-3DES、AES等算法" class="headerlink" title="关于DES,3DES、AES等算法"></a>关于DES,3DES、AES等算法</h3><p>这几天看了一下DES和3DES的算法原理(原理看似挺简单)，但是对应的算法实现没有看太明白，之后如有突破，会单独写篇文章分享。<br>还有一点就是，请慎重使用那些不公开的加密算法，毕竟这些公开算法相对经得起考验。前两天我在公司的代码库中看到一段加密函数，看似写的很高深，仔细读了一下，发现加密后的内容几乎不攻自破。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在互联网如此发达的年代，信息的安全也变得越来越重要，我们也使用了各式各样的加密手段来保护数据的安全，但是各种加密算法你真的了解它么？他们的原理又是什么呢？&lt;br&gt;常见的加密分为对称加密、非对称加密还有散列算法(严格来说，散列不算加密)，这篇文章我们
    
    </summary>
    
      <category term="加密算法" scheme="https://zhaojingxian.cn/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="加密算法" scheme="https://zhaojingxian.cn/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
      <category term="对称加密" scheme="https://zhaojingxian.cn/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
      <category term="DES" scheme="https://zhaojingxian.cn/tags/DES/"/>
    
      <category term="AES" scheme="https://zhaojingxian.cn/tags/AES/"/>
    
      <category term="3DES" scheme="https://zhaojingxian.cn/tags/3DES/"/>
    
  </entry>
  
  <entry>
    <title>inode介绍及用途</title>
    <link href="https://zhaojingxian.cn/2017/02/16/inode%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%94%A8%E9%80%94/"/>
    <id>https://zhaojingxian.cn/2017/02/16/inode介绍及用途/</id>
    <published>2017-02-16T06:38:16.000Z</published>
    <updated>2017-02-19T15:39:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Linux空间还有不少剩余，但有些时候会提示空间已满，这是为啥？</p>
</blockquote>
<h3 id="df查看空间"><a href="#df查看空间" class="headerlink" title="df查看空间"></a>df查看空间</h3><p>在日常使用中，有时候会发生如下情况，输入: <code>df</code>，显示如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">文件系统</th>
<th style="text-align:center">已用(I)%</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/dev/xvda1</td>
<td style="text-align:center">70%</td>
</tr>
</tbody>
</table>
<p>但是你创建文件或者文件夹的时候会提示你，空间已满！</p>
<p>输入：<code>df -i</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">文件系统</th>
<th style="text-align:center">已用(I)%</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/dev/xvda1</td>
<td style="text-align:center">100%</td>
</tr>
</tbody>
</table>
<p>问题就在这里，<code>-i</code>表示:显示inode信息而非块使用量，那么inode又是什么呢？</p>
<h3 id="inode"><a href="#inode" class="headerlink" title="inode"></a>inode</h3><p>inode中文意思为索引节点，这个索引的就是文件，我们知道Linux下一切皆为文件，inode记录的就是文件在硬盘获取其它设备上对应的储存位置。<br>文件名与目录名是便于使用的别名。一个文件系统对象可以有多个别名(比如软、硬连接)，但只能有一个inode，并用这个inode来索引文件系统对象的存储位置。<br>Linux中硬盘在格式化，后会将硬盘分为inode区、数据区、目录区。</p>
<ul>
<li>inode区记录的就是每个节点的节点类型、字节数、权限、创建时间等相关属性</li>
<li>数据区当然是数据真正储存的地方了</li>
<li>目录区记录的是目录下面文件的名称以及对应的inode</li>
</ul>
<p><strong>inode在生成分区的时候已经定义好了数量，如果inode使用完了，也就不能继续创建新的文件了</strong></p>
<h3 id="POSIX-inode"><a href="#POSIX-inode" class="headerlink" title="POSIX inode"></a>POSIX inode</h3><p>POSIX标准强制规范了文件系统的行为。每个“文件系统对象”必须具有：</p>
<ul>
<li>以字节为单位表示的文件大小。</li>
<li>设备ID，标识容纳该文件的设备。</li>
<li>文件所有者的User ID。</li>
<li>文件的Group ID</li>
<li>文件的模式（mode），确定了文件的类型，以及它的所有者、它的group、其它用户访问此文件的权限。</li>
<li>额外的系统与用户标志（flag），用来保护该文件。</li>
<li>3个时间戳，记录了inode自身被修改（ctime, inode change time）、文件内容被修改（mtime, modification time）、最后一次访问（atime, access time）的时间。</li>
<li>1个链接数，表示有多少个硬链接指向此inode。</li>
<li>到文件系统存储位置的指针。通常是1K字节或者2K字节的存储容量为基本单位。</li>
</ul>
<h3 id="查询inode属性"><a href="#查询inode属性" class="headerlink" title="查询inode属性"></a>查询inode属性</h3><p>执行<code>stat file</code>会输出类似如下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">文件：&quot;a.php&quot;</div><div class="line">  大小：4096      	块：8          IO 块：4096   目录</div><div class="line">设备：ca01h/51713d	Inode：276961      硬链接：2</div><div class="line">权限：(0755/drwxr-xr-x)  Uid：(    0/    root)   Gid：(    0/    root)</div><div class="line">最近访问：2017-02-18 17:16:02.916390626 +0800</div><div class="line">最近更改：2017-02-18 17:16:02.916390626 +0800</div><div class="line">最近改动：2017-02-18 17:16:02.916390626 +0800</div><div class="line">创建时间：-</div></pre></td></tr></table></figure>
<h3 id="使用inode删除文件"><a href="#使用inode删除文件" class="headerlink" title="使用inode删除文件"></a>使用inode删除文件</h3><p>有时候服务器上因为各种原因会生成一些名字很奇怪的文件或者目录，想删除掉的话，可以直接通过inode删除</p>
<p><code>ll -i</code>查看文件列表:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">276893 -rw-r--r--  1 root    root       0 2月  18 17:30 a.php</div><div class="line">268121 drwxr-xr-x  3 root    root    4096 2月  14 18:25 blog</div></pre></td></tr></table></figure>
<p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm `find -inum 276893` //通过find查询inode为276893的文件名，然后删除</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Linux空间还有不少剩余，但有些时候会提示空间已满，这是为啥？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;df查看空间&quot;&gt;&lt;a href=&quot;#df查看空间&quot; class=&quot;headerlink&quot; title=&quot;df查看空间&quot;&gt;&lt;/a&gt;d
    
    </summary>
    
      <category term="Linux" scheme="https://zhaojingxian.cn/categories/Linux/"/>
    
    
      <category term="inode" scheme="https://zhaojingxian.cn/tags/inode/"/>
    
      <category term="posix" scheme="https://zhaojingxian.cn/tags/posix/"/>
    
  </entry>
  
  <entry>
    <title>正确认识浮点数</title>
    <link href="https://zhaojingxian.cn/2017/02/15/%E6%AD%A3%E7%A1%AE%E8%AE%A4%E8%AF%86%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    <id>https://zhaojingxian.cn/2017/02/15/正确认识浮点数/</id>
    <published>2017-02-14T16:26:04.000Z</published>
    <updated>2017-02-15T17:38:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>大家在日常开发中，必然使用过浮点数，也会发现浮点数不是精确的，那究竟是什么原因造成的呢？</p>
</blockquote>
<h3 id="奇怪的结果"><a href="#奇怪的结果" class="headerlink" title="奇怪的结果"></a>奇怪的结果</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var_dump((<span class="number">1</span><span class="number">-0.9</span>) == <span class="number">0.1</span>);</div><div class="line"><span class="comment">//输出:bool(false)</span></div></pre></td></tr></table></figure>
<p>很奇怪吧！1-0.9怎么能不等于0.1呢？这是为什么呢？这要从浮点数的储存标准开始说。</p>
<h3 id="IEEE-754"><a href="#IEEE-754" class="headerlink" title="IEEE 754"></a>IEEE 754</h3><p>浮点数在计算机中是根据<code>IEEE 754</code>(二进制浮点数算数标准)储存的。<br>计算公式为: (-1)^S x M x 2^E</p>
<p>32位单精度储存结构(对应占位)</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号(S)</th>
<th style="text-align:center">阶码(E)</th>
<th style="text-align:center">尾数(M)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">8</td>
<td style="text-align:center">23</td>
</tr>
</tbody>
</table>
<p>64位双精度储存结构(对应占位)</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号(S)</th>
<th style="text-align:center">阶码(E)</th>
<th style="text-align:center">尾数(M)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">11</td>
<td style="text-align:center">52</td>
</tr>
</tbody>
</table>
<p>解释:</p>
<ul>
<li>S: 符号(0正，1负)</li>
<li>E: 阶码(指数)</li>
<li>M: 尾数(二进制小数,数字的实体部分)</li>
</ul>
<p>M(尾数)和E(阶码)不同情况需要分别对待</p>
<h3 id="E-阶码-的三种状态及对应的M表示"><a href="#E-阶码-的三种状态及对应的M表示" class="headerlink" title="E(阶码)的三种状态及对应的M表示"></a>E(阶码)的三种状态及对应的M表示</h3><p><img src="/2017/02/15/正确认识浮点数/exp.jpg" alt="exp"></p>
<p>从图中(截图于深入理解计算机系统)我们可以分为三种情况(第三种又分为两种特殊情况)</p>
<h4 id="规格化"><a href="#规格化" class="headerlink" title="规格化"></a>规格化</h4><p>E既不等于0也不等于255(将S按十进制计算)，这个时候的<code>E=E-127</code>，M的二进制小数默认省略了<code>1.</code>，也就是<code>M=1.M(二进制小数)</code><br>我们做一个简单的测试看一下二进制<code>00111110001000000000000000000000</code>(32位)表示的对应的浮点数为多少？</p>
<ul>
<li>首先拆分二进制: <code>0</code> <code>01111100</code> <code>01000000000000000000000</code></li>
<li>E = 124 = 124 - 127 = -3</li>
<li>M = 1.01000000000000000000000</li>
<li>套公式: 1 x 1.01000000000000000000000 x 2^-3 = 0.00101000000000000000000000 = 2^-3 + 2^-5 = 0.15625</li>
</ul>
<p>使用PHP验证一下结果：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var_dump(unpack(<span class="string">'f'</span>, pack(<span class="string">'l'</span>, bindec(<span class="string">'00111110001000000000000000000000'</span>)))[<span class="number">1</span>]);</div><div class="line"><span class="comment">//输出: float(0.15625)</span></div></pre></td></tr></table></figure>
<p>上面的例子没有丢失精度，下面看一个丢失精度的例子：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">printf(<span class="string">'%032s'</span>, decbin(unpack(<span class="string">'l'</span>, pack(<span class="string">'f'</span>, <span class="number">1</span>/<span class="number">3</span>))[<span class="number">1</span>]));</div><div class="line"><span class="comment">//输出: 00111110101010101010101010101011</span></div><div class="line"></div><div class="line">var_dump(unpack(<span class="string">'f'</span>, pack(<span class="string">'l'</span>, bindec(<span class="string">'00111110101010101010101010101011'</span>)))[<span class="number">1</span>]);</div><div class="line">float(<span class="number">0.33333334326744</span>)</div></pre></td></tr></table></figure>
<p>丢失精度最主要原因就在于M(二进制小数)，我们只能精确的表示2^n倍数的数(2^-1(0.5),2^-2(0.25),2^-3(0.125)…)，丢了在所难免。</p>
<h4 id="非规格化"><a href="#非规格化" class="headerlink" title="非规格化"></a>非规格化</h4><p>E等于0，这个时候<code>E=-126</code>，M的二进制小数前缀为<code>0.</code>，也就是<code>M=0.M(二进制小数)</code>，具体过程就不写了，和上面类似</p>
<h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p>E等于255(全部位都为1)，如果M全部为0，那么表示为无穷大，否则表示为NaN(不是一个数)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var_dump(unpack(<span class="string">'f'</span>, pack(<span class="string">'l'</span>, bindec(<span class="string">'01111111100000000000000000000000'</span>)))[<span class="number">1</span>]);</div><div class="line"><span class="comment">//输出: float(INF)</span></div><div class="line"></div><div class="line">var_dump(unpack(<span class="string">'f'</span>, pack(<span class="string">'l'</span>, bindec(<span class="string">'01111111100000000000000000000110'</span>)))[<span class="number">1</span>]);</div><div class="line"><span class="comment">//输出: float(NAN)</span></div></pre></td></tr></table></figure>
<h3 id="不要比较浮点数"><a href="#不要比较浮点数" class="headerlink" title="不要比较浮点数"></a>不要比较浮点数</h3><p>总之，浮点数是不准确的。尤其在我们日常工作中，不要比较浮点数的大小，如果需要精确的比较计算，请使用<code>bc*</code>系列函数。<br>还有一点，浮点数不准确和PHP没有任何关系，PHP不背这个锅。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;大家在日常开发中，必然使用过浮点数，也会发现浮点数不是精确的，那究竟是什么原因造成的呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;奇怪的结果&quot;&gt;&lt;a href=&quot;#奇怪的结果&quot; class=&quot;headerlink&quot; title=&quot;奇怪的
    
    </summary>
    
      <category term="计算机原理" scheme="https://zhaojingxian.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="浮点数" scheme="https://zhaojingxian.cn/tags/%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    
      <category term="IEEE 754" scheme="https://zhaojingxian.cn/tags/IEEE-754/"/>
    
  </entry>
  
  <entry>
    <title>PHP中pack、unpack的用法</title>
    <link href="https://zhaojingxian.cn/2017/02/14/PHP%E4%B8%ADpack%E3%80%81unpack%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://zhaojingxian.cn/2017/02/14/PHP中pack、unpack的用法/</id>
    <published>2017-02-14T15:47:03.000Z</published>
    <updated>2017-02-15T05:14:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>PHP中有两个函数pack和unpack，很多PHPer在实际项目中从来没有使用过，甚至也不知道这两个方法是用来干嘛的。这篇文章来为大家介绍一下它俩到底是用来干啥的。</p>
</blockquote>
<h3 id="pack"><a href="#pack" class="headerlink" title="pack"></a>pack</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string pack ( string $format [, mixed $args [, mixed $... ]] )</div></pre></td></tr></table></figure>
<p>该函数用来将对应的参数(<code>$args</code>)打包成二进制字符串。</p>
<p>其中第一个参数$format，有如下选项(可选参数很多，后面会选几个常用的讲解)：</p>
<table>
<thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>以NUL字节填充字符串空白</td>
</tr>
<tr>
<td>A</td>
<td>以SPACE(空格)填充字符串</td>
</tr>
<tr>
<td>h</td>
<td>十六进制字符串，低位在前</td>
</tr>
<tr>
<td>H</td>
<td>十六进制字符串，高位在前</td>
</tr>
<tr>
<td>c</td>
<td>有符号字符</td>
</tr>
<tr>
<td>C</td>
<td>无符号字符</td>
</tr>
<tr>
<td>s</td>
<td>有符号短整型(16位，主机字节序)</td>
</tr>
<tr>
<td>S</td>
<td>无符号短整型(16位，主机字节序)</td>
</tr>
<tr>
<td>n</td>
<td>无符号短整型(16位，大端字节序)</td>
</tr>
<tr>
<td>v</td>
<td>无符号短整型(16位，小端字节序)</td>
</tr>
<tr>
<td>i</td>
<td>有符号整型(机器相关大小字节序)</td>
</tr>
<tr>
<td>I</td>
<td>无符号整型(机器相关大小字节序)</td>
</tr>
<tr>
<td>l</td>
<td>有符号长整型(32位，主机字节序)</td>
</tr>
<tr>
<td>L</td>
<td>无符号长整型(32位，主机字节序)</td>
</tr>
<tr>
<td>N</td>
<td>无符号长整型(32位，大端字节序)</td>
</tr>
<tr>
<td>V</td>
<td>无符号长整型(32位，小端字节序)</td>
</tr>
<tr>
<td>q</td>
<td>有符号长长整型(64位，主机字节序)</td>
</tr>
<tr>
<td>Q</td>
<td>无符号长长整型(64位，主机字节序)</td>
</tr>
<tr>
<td>J</td>
<td>无符号长长整型(64位，大端字节序)</td>
</tr>
<tr>
<td>P</td>
<td>无符号长长整型(64位，小端字节序)</td>
</tr>
<tr>
<td>f</td>
<td>单精度浮点型(机器相关大小)</td>
</tr>
<tr>
<td>d</td>
<td>双精度浮点型(机器相关大小)</td>
</tr>
<tr>
<td>x</td>
<td>NUL字节</td>
</tr>
<tr>
<td>X</td>
<td>回退一字节</td>
</tr>
<tr>
<td>Z</td>
<td>以NUL字节填充字符串空白(new in PHP 5.5)</td>
</tr>
<tr>
<td>@</td>
<td>NUL填充到绝对位置</td>
</tr>
</tbody>
</table>
<p>这么多参数看下来，我第一次是真心懵逼了，大部分说明都很好理解，但是其中的主机、大端、小端等字节序是什么鬼呢？接下里的内容比较枯燥，但必须理解才行，坚持吧。</p>
<h3 id="字节序是什么？"><a href="#字节序是什么？" class="headerlink" title="字节序是什么？"></a>字节序是什么？</h3><p>就是字节的顺序，说白了就是多字节数据的存放顺序(一个字节显然不需要顺序)。<br>比如<code>A</code>和<code>B</code>分别对应的二进制表示为<code>0100 0001</code>、<code>0100 0010</code>。对于储存字符串<code>AB</code>，我们可以<code>0100 0001 0100 0010</code>也可以<code>0100 0010 0100 0001</code>，这个顺序就是所谓的字节序。</p>
<h3 id="高-低位字节"><a href="#高-低位字节" class="headerlink" title="高/低位字节"></a>高/低位字节</h3><p>比如字符串<code>AB</code>，左高右低(我们正常的阅读顺序)，<code>A</code>为高字节，<code>B</code>为低字节</p>
<h3 id="高-低地址"><a href="#高-低地址" class="headerlink" title="高/低地址"></a>高/低地址</h3><p>假设0x123456是按从高位到底位的顺序储存，内存中是这样存放的：</p>
<p>高地址 -&gt; 低地址<br>12 -&gt; 34 -&gt; 56</p>
<h3 id="大端字节序-网络字节序"><a href="#大端字节序-网络字节序" class="headerlink" title="大端字节序(网络字节序)"></a>大端字节序(网络字节序)</h3><p>大端就是将高位字节放到内存的低地址端，低位字节放到高地址端。网络传输中(比如TCP/IP)低地址端(高位字节)放在流的开始，对于2个字节的字符串(<code>AB</code>)，传输顺序为：<code>A</code>(0-7bit)、<code>B</code>(8-15bit)。<br>那么小端字节序自然和大端相反。</p>
<h3 id="主机字节序"><a href="#主机字节序" class="headerlink" title="主机字节序"></a>主机字节序</h3><p>表示当年机器的字节序(也就是网络字节序是确定的，而主机字节序是依机器确定的)，<code>一般</code>为小端字节序。</p>
<h3 id="a和A-打包字符串，用NUL或者空格填充"><a href="#a和A-打包字符串，用NUL或者空格填充" class="headerlink" title="a和A(打包字符串，用NUL或者空格填充)"></a>a和A(打包字符串，用NUL或者空格填充)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'a6'</span>, <span class="string">'china'</span>);</div><div class="line">var_dump($string); <span class="comment">//输出结果: string(6) "china",最后一个字节是不可见的NUL</span></div><div class="line"><span class="keyword">echo</span> ord($string[<span class="number">5</span>]); <span class="comment">//输出结果: 0(ASCII码中0对应的就是nul)</span></div><div class="line"></div><div class="line"><span class="comment">//A同理</span></div><div class="line">$string = pack(<span class="string">'A6'</span>, <span class="string">'china'</span>);</div><div class="line">var_dump($string); <span class="comment">//输出结果: string(6) "china ",最后一个字节是空格</span></div><div class="line"><span class="keyword">echo</span> ord($string[<span class="number">5</span>]); <span class="comment">//输出结果: 32(ASCII码中32对应的就是空格)</span></div></pre></td></tr></table></figure>
<p><img src="/2017/02/14/PHP中pack、unpack的用法/ascii.jpg" alt="ASCII表"><br>附赠ASCII表一张(linux/unix下可以使用<code>man ascii</code>查看)</p>
<h3 id="h和H"><a href="#h和H" class="headerlink" title="h和H"></a>h和H</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'H3'</span>, <span class="number">281</span>);</div><div class="line">var_dump($string); <span class="comment">//输出结果: string(2) "("</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($string);$i++) &#123;</div><div class="line">    <span class="keyword">echo</span> ord($string[$i]) . PHP_EOL;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出结果: 40 16</span></div></pre></td></tr></table></figure>
<p>h和H需要特殊说明一下，它们是将对应的参数看做十六进制字符然后打包。什么意思呢？比如上面的<code>281</code>，打包前会将<code>281</code>转换为<code>0x281</code>，因为十六进制的一位对应二进制的四位，上面的<code>0x281</code>只有1.5个字节，后面会默认补0变成<code>0x2810</code>，0x28对应的十进制为40(<code>(</code>)，0x10对应的十进制为16(<code>dle</code>不可见字符)，懂了吧？不懂可以给我留言。。</p>
<h3 id="c和C"><a href="#c和C" class="headerlink" title="c和C"></a>c和C</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'c3'</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">-1</span>);</div><div class="line">var_dump($string); <span class="comment">//输出:string(3) "CD�"</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($string);$i++) &#123;</div><div class="line">    <span class="keyword">echo</span> ord($string[$i]) . PHP_EOL;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出: 67 68 225</span></div></pre></td></tr></table></figure>
<p>最后输出本能应该觉得是67 68 -1<br>ord获取的是字符的ASCII码(<code>范围0-255</code>)，这时<code>-1(0000 0001)</code>对应的字符将以补码的形式输出也就是<code>255(1111 1110 + 0000 0001 = 1111 1111)</code></p>
<h3 id="整型相关"><a href="#整型相关" class="headerlink" title="整型相关"></a>整型相关</h3><p>所有的整型类型使用方法完全一样，主要注意它们的位和字节序就可以了，下面以L作为例子展示</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'L'</span>, <span class="number">123456789</span>);</div><div class="line">var_dump($string); <span class="comment">//输出:string(4) "�["</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($string);$i++) &#123;</div><div class="line">    <span class="keyword">echo</span> ord($string[$i]) . PHP_EOL;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出: 21 205 91 7</span></div></pre></td></tr></table></figure>
<h3 id="f和d"><a href="#f和d" class="headerlink" title="f和d"></a>f和d</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'f'</span>, <span class="number">12345.123</span>);</div><div class="line">var_dump($string);</div><div class="line"><span class="comment">//输出:string(4) "~�@F"</span></div><div class="line"></div><div class="line">var_dump(unpack(<span class="string">'f'</span>, $string)); <span class="comment">//这里提前用到了unpack，后面会讲解</span></div><div class="line"><span class="comment">//输出:float(12345.123046875)</span></div></pre></td></tr></table></figure>
<p>f和d是针对浮点数打包，至于为什么打包前是<code>12345.123</code>解包后是<code>12345.123046875</code>，这个和浮点数的储存有关系，后面可以单开一个文章讲解一下IEEE标准</p>
<h3 id="x、X、Z、"><a href="#x、X、Z、" class="headerlink" title="x、X、Z、@"></a>x、X、Z、@</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'x'</span>); <span class="comment">//打包一个nul字符串</span></div><div class="line"><span class="keyword">echo</span> ord($string); <span class="comment">//输出: 0</span></div></pre></td></tr></table></figure>
<p>关于<code>X(大写X)</code>，试了N次，没搞明白怎么用，有清楚的童鞋可以给我留言，多谢。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'Z2'</span>, <span class="string">'abc5'</span>); <span class="comment">//其实就是将从Z后面的数字位置开始，全部设置为nul</span></div><div class="line">var_dump($string); <span class="comment">//输出:string(2) "a"</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($string);$i++) &#123;</div><div class="line">    <span class="keyword">echo</span> ord($string[$i]) . PHP_EOL;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出: 97 0</span></div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'@4'</span>); <span class="comment">//我理解为填充N个nul</span></div><div class="line">var_dump($string); <span class="comment">//输出: string(4) ""</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($string);$i++) &#123;</div><div class="line">    <span class="keyword">echo</span> ord($string[$i]) . PHP_EOL;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出: 0 0 0 0</span></div></pre></td></tr></table></figure>
<h3 id="unpack"><a href="#unpack" class="headerlink" title="unpack"></a>unpack</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span> unpack ( string $format , string $data )</div></pre></td></tr></table></figure>
<p>unpack的使用相当简单，就是讲pack打包的数据解包，打包的时候用的什么参数，就用什么参数解包，具体使用懒得说了，列几个小例子</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'L4'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</div><div class="line">var_dump(unpack(<span class="string">'L4'</span>, $string));</div><div class="line"><span class="comment">//输出:</span></div><div class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</div><div class="line">[<span class="number">1</span>]=&gt;</div><div class="line">int(<span class="number">1</span>)</div><div class="line">[<span class="number">2</span>]=&gt;</div><div class="line">int(<span class="number">2</span>)</div><div class="line">[<span class="number">3</span>]=&gt;</div><div class="line">int(<span class="number">3</span>)</div><div class="line">[<span class="number">4</span>]=&gt;</div><div class="line">int(<span class="number">4</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">$string = pack(<span class="string">'L4'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</div><div class="line">var_dump(unpack(<span class="string">'Ll1/Ll2/Ll3/Ll4'</span>, $string)); <span class="comment">//可以指定key，用/分割</span></div><div class="line"><span class="comment">//输出:</span></div><div class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</div><div class="line">[<span class="string">"l1"</span>]=&gt;</div><div class="line">int(<span class="number">1</span>)</div><div class="line">[<span class="string">"l2"</span>]=&gt;</div><div class="line">int(<span class="number">2</span>)</div><div class="line">[<span class="string">"l3"</span>]=&gt;</div><div class="line">int(<span class="number">3</span>)</div><div class="line">[<span class="string">"l4"</span>]=&gt;</div><div class="line">int(<span class="number">4</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="这两个函数到底有啥用途"><a href="#这两个函数到底有啥用途" class="headerlink" title="这两个函数到底有啥用途"></a>这两个函数到底有啥用途</h3><ul>
<li>数据通信(通过二进制格式与其它语言通信)</li>
<li>数据加密(如果不告诉第三方你的打包方式，对方解包的难度就相对很大)</li>
<li>节省空间(比如比较大的数字按字符串储存会浪费很多空间，打包成二进制格式才需要4位<32位数字>)</32位数字></li>
<li>自己去想吧</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;PHP中有两个函数pack和unpack，很多PHPer在实际项目中从来没有使用过，甚至也不知道这两个方法是用来干嘛的。这篇文章来为大家介绍一下它俩到底是用来干啥的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;pack&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="PHP" scheme="https://zhaojingxian.cn/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://zhaojingxian.cn/tags/PHP/"/>
    
      <category term="pack" scheme="https://zhaojingxian.cn/tags/pack/"/>
    
      <category term="unpack" scheme="https://zhaojingxian.cn/tags/unpack/"/>
    
  </entry>
  
</feed>
