<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhjx922 De Blog</title>
  <subtitle>学习、成长、记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaojingxian.cn/"/>
  <updated>2018-07-11T14:09:57.177Z</updated>
  <id>https://zhaojingxian.cn/</id>
  
  <author>
    <name>zhjx922</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何自己实现session功能</title>
    <link href="https://zhaojingxian.cn/2018/07/11/%E5%A6%82%E4%BD%95%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0session%E5%8A%9F%E8%83%BD/"/>
    <id>https://zhaojingxian.cn/2018/07/11/如何自己实现session功能/</id>
    <published>2018-07-11T13:06:16.000Z</published>
    <updated>2018-07-11T14:09:57.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>session字如其意，它的存在就是为了保持会话状态。PHP中的$_SESSION让我们很方便的使用它，但是如果PHP本身不提供这个功能，我们该如何实现呢？且听我慢慢忽悠。</p>
</blockquote>
<h3 id="session的实现原理"><a href="#session的实现原理" class="headerlink" title="session的实现原理"></a>session的实现原理</h3><p>session本身的实现原理其实很简单，几句话就可以说完</p>
<ul>
<li>用户首次访问时生成唯一ID(其实就是PHP中的<code>session_id</code>)</li>
<li>根据session_id作为唯一标示，生成session_id为名称的文件(储存session内容，当然也可以存到redis或者mysql中)</li>
<li>通过cookie下发<code>session_id</code>到客户端</li>
<li>用户再次访问时会通过cookie将<code>session_id</code>带上</li>
<li>服务端通过<code>session_id</code>获取对应的session内容(文件、Cache、数据库)</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>下面是我通过PHP实现的一个简单的session功能类，用来演示具体的实现过程，只实现了写和读功能(没有考虑会话有效期、并发等问题)。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Session类简单实现</div><div class="line"> * <span class="doctag">@author</span> zhjx922</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//当前sessionId</span></div><div class="line">    <span class="keyword">private</span> $_sessionId;</div><div class="line">    <span class="comment">//session的储存路径</span></div><div class="line">    <span class="keyword">private</span> $_sessionPath = <span class="string">'/tmp/session'</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化sessionId</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">'PHPSESSID'</span>]) &amp;&amp; <span class="keyword">$this</span>-&gt;checkSession($_COOKIE[<span class="string">'PHPSESSID'</span>])) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_sessionId = $_COOKIE[<span class="string">'PHPSESSID'</span>];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_sessionId = uniqid();</div><div class="line">            setcookie(<span class="string">"PHPSESSID"</span>, <span class="keyword">$this</span>-&gt;_sessionId);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置session</div><div class="line">     * <span class="doctag">@param</span> string $key</div><div class="line">     * <span class="doctag">@param</span> mixed $value</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSession</span><span class="params">($key, $value)</span></span></div><div class="line">    &#123;</div><div class="line">        $sessionInfo = <span class="keyword">$this</span>-&gt;getSessionInfo();</div><div class="line">        $sessionInfo[$key] = $value;</div><div class="line">        $sessionFile =  <span class="string">"&#123;$this-&gt;_sessionPath&#125;/&#123;$this-&gt;_sessionId&#125;"</span>;</div><div class="line">        file_put_contents($sessionFile, serialize($sessionInfo));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取session</div><div class="line">     * <span class="doctag">@param</span> string $key</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSession</span><span class="params">($key)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getSessionInfo()[$key];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取当前sessionId下的内容</div><div class="line">     * <span class="doctag">@return</span> array</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getSessionInfo</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(!is_dir(<span class="keyword">$this</span>-&gt;_sessionPath))</div><div class="line">        &#123;</div><div class="line">            mkdir(<span class="keyword">$this</span>-&gt;_sessionPath);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $sessionFile =  <span class="string">"&#123;$this-&gt;_sessionPath&#125;/&#123;$this-&gt;_sessionId&#125;"</span>;</div><div class="line">        <span class="keyword">if</span>(is_file($sessionFile)) &#123;</div><div class="line">            $contents = file_get_contents($sessionFile);</div><div class="line">            <span class="keyword">return</span> unserialize($contents);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> [];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检查session是否有效</div><div class="line">     * <span class="doctag">@param</span> string $sessionId</div><div class="line">     * <span class="doctag">@return</span> bool</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">checkSession</span><span class="params">($sessionId)</span></span></div><div class="line">    &#123;</div><div class="line">        $sessionFile =  <span class="string">"&#123;$this-&gt;_sessionPath&#125;/&#123;$sessionId&#125;"</span>;</div><div class="line">        <span class="keyword">if</span>(is_file($sessionFile)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用方法如下</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$session = <span class="keyword">new</span> Session();</div><div class="line">$session-&gt;setSession(<span class="string">'a'</span>, <span class="string">'b'</span>); <span class="comment">//第二次访问时注释掉这行，验证下一行$session-&gt;getSession('a')输出的内容是否正确</span></div><div class="line">var_dump($session-&gt;getSession(<span class="string">'a'</span>));</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;session字如其意，它的存在就是为了保持会话状态。PHP中的$_SESSION让我们很方便的使用它，但是如果PHP本身不提供这个功能，我们该如何实现呢？且听我慢慢忽悠。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;session的实现原
    
    </summary>
    
      <category term="PHP" scheme="https://zhaojingxian.cn/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://zhaojingxian.cn/tags/PHP/"/>
    
      <category term="session" scheme="https://zhaojingxian.cn/tags/session/"/>
    
      <category term="cookie" scheme="https://zhaojingxian.cn/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号(服务号)开发注意事项</title>
    <link href="https://zhaojingxian.cn/2018/03/20/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7-%E6%9C%8D%E5%8A%A1%E5%8F%B7-%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://zhaojingxian.cn/2018/03/20/微信公众号-服务号-开发注意事项/</id>
    <published>2018-03-20T14:07:03.000Z</published>
    <updated>2018-03-20T15:27:04.339Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>微信公众号(服务号)已经推出很久了，但是第一次接触的人，或多或少会走一些弯路，下面是我在开发中见到的一些问题，也给自己做个备份</p>
</blockquote>
<h3 id="万事开头难"><a href="#万事开头难" class="headerlink" title="万事开头难"></a>万事开头难</h3><p>其实只要是针对第三方平台的开发，第一件要做的事儿不是开干，而是先了解它。</p>
<ul>
<li>官方文档先读一遍(了解它再征服它~) <a href="https://mp.weixin.qq.com/wiki" target="_blank" rel="external">https://mp.weixin.qq.com/wiki</a></li>
<li>准备一个已备案的域名和一个外网服务器，家里有些宽带有外网IP，不过80端口都被封了，但是443是可以用的~</li>
<li>微信测试号，不需要线上申请号，扫描二维码直接登录，页面略丑 <a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="external">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a></li>
<li>在线调试用具 <a href="https://mp.weixin.qq.com/debug/cgi-bin/apiinfo" target="_blank" rel="external">https://mp.weixin.qq.com/debug/cgi-bin/apiinfo</a></li>
<li>本地开发工具(公众号&amp;小程序) <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html" target="_blank" rel="external">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/devtools.html</a></li>
</ul>
<h3 id="一些功能点的使用场景"><a href="#一些功能点的使用场景" class="headerlink" title="一些功能点的使用场景"></a>一些功能点的使用场景</h3><h4 id="带参数的二维码"><a href="#带参数的二维码" class="headerlink" title="带参数的二维码"></a>带参数的二维码</h4><p>如果要对一些活动的二维码做标记(来源、场景、关注绑定等)，关注\扫描该二维码服务端会同时收到二维码中携带的参数。</p>
<h4 id="个性化菜单"><a href="#个性化菜单" class="headerlink" title="个性化菜单"></a>个性化菜单</h4><p>可用根据用户的属性(标签、性别、手机系统、地区、语言)显示不同的菜单，可以和带参数的二维码结合使用。</p>
<h4 id="客服消息"><a href="#客服消息" class="headerlink" title="客服消息"></a>客服消息</h4><p>当用户主动和公众号有一些交互(发信息、点击菜单、关注公众号等)时，在48小时内，可以主动给用户推送消息。</p>
<h4 id="JS-SDK"><a href="#JS-SDK" class="headerlink" title="JS-SDK"></a>JS-SDK</h4><p>只要是在微信里面传播的页面，绝对离不开微信提供的强大的SDK功能，支持：分享内容自定义、图像能力(拍照、选图等)、音频能力(录音、播放等)，具体的功能自己挖掘。</p>
<h3 id="遇到过的一些问题"><a href="#遇到过的一些问题" class="headerlink" title="遇到过的一些问题"></a>遇到过的一些问题</h3><ul>
<li>测试环境：必须关注测试服务号，否则你会碰到各种异常问题不能自拔。</li>
<li>测试环境：模板数量有限制，最多10条，多了就得删。</li>
<li>测试环境：appID和生产环境要区分开，不要混淆(当然，这个和mysql等配置同理)。</li>
<li>测试环境：不要使用生产环境的appID生成access_token(生产环境的token会失效，导致错误)</li>
<li>测试环境：只支持配置一个js安全域名(线上是3个)。</li>
<li>测试环境：授权回调页面域名隐藏在体验接口权限表中，仔细找。</li>
<li>接收到微信的所有请求必须正常回复(输出一个success或者空)，否则微信会认为处理失败，重试N次。</li>
<li>access_token放到分布式cache中，不要等失效，通过定时脚本在过期前更新。</li>
<li>区分清楚ToUserName和FromUserName，to是你，from是用户(用户的open_id)~</li>
<li>调用js-sdk必须配置js安全域名。</li>
<li>用户授权分两种，隐式和显式。隐式：只能获取到用户open_id，如果不关注公众号，不能获取用户信息。显式：只要用户点击确定，就可以获取用户昵称等信息。</li>
<li>调用所有js-sdk都必须通过接口获取签名数据(每次调用都需要：比如动态更改了分享标题等)</li>
<li>前端页面使用vue.js类框架时，全部通过api获取数据，js-sdk签名中的url需要通过<code>$_SERVER[&#39;HTTP_REFERER&#39;]</code>获取，而不是<code>$_SERVER[&#39;HTTP_HOST&#39;].$_SERVER[&#39;REQUEST_URI&#39;]</code>。</li>
<li>带参数的二维码分为永久和临时两种，永久的数量有限，临时的数量相对较多。比如和单个用户属性相关的二维码使用临时的二维码优先。</li>
<li>通过js-sdk上传的素材(音频、图片等)，微信先会给一个media_id(通常有效期为3天)，当我们使用的时候通过media_id下载下来。</li>
<li>模板消息，推送次数超多，但是必须使用模板库的一些固定格式内容，自己申请成功率极低。</li>
<li>页面启用https后，页面的资源也必须使用https，当然这个不止微信里面是这样。</li>
</ul>
<h3 id="不是总结的总结"><a href="#不是总结的总结" class="headerlink" title="不是总结的总结"></a>不是总结的总结</h3><p>工欲善其事必先利其器，无论做什么，学什么，都得先把它的文档看一遍，工具安装一个。直接上手整，一脸懵逼浪费时间不说，活儿能不能干好都是个问题。</p>
<p>大家还遇到过什么问题或者坑，欢迎留言分享~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;微信公众号(服务号)已经推出很久了，但是第一次接触的人，或多或少会走一些弯路，下面是我在开发中见到的一些问题，也给自己做个备份&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;万事开头难&quot;&gt;&lt;a href=&quot;#万事开头难&quot; class=&quot;hea
    
    </summary>
    
      <category term="微信公众号" scheme="https://zhaojingxian.cn/categories/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
    
      <category term="微信" scheme="https://zhaojingxian.cn/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="公众号" scheme="https://zhaojingxian.cn/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="服务号" scheme="https://zhaojingxian.cn/tags/%E6%9C%8D%E5%8A%A1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>本地调试微信之内网穿透</title>
    <link href="https://zhaojingxian.cn/2017/06/29/%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E5%BE%AE%E4%BF%A1%E4%B9%8B%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://zhaojingxian.cn/2017/06/29/本地调试微信之内网穿透/</id>
    <published>2017-06-29T14:43:10.000Z</published>
    <updated>2017-06-29T15:33:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近一直在做微信服务号的相关开发，其中一个特别麻烦的问题就是，如何在本地调试，将微信服务器的信息转发到自己的开发机上，下面为大家介绍几种我尝试过的方法</p>
</blockquote>
<h3 id="微信公众号-服务号-对服务器的要求"><a href="#微信公众号-服务号-对服务器的要求" class="headerlink" title="微信公众号(服务号)对服务器的要求"></a>微信公众号(服务号)对服务器的要求</h3><ul>
<li>域名(线上环境必须备案)</li>
<li>支持http和https两种解析，对应的只支持80和443端口</li>
</ul>
<h3 id="微信沙盒环境"><a href="#微信沙盒环境" class="headerlink" title="微信沙盒环境"></a>微信沙盒环境</h3><p>正常开发测试我们肯定不能使用线上的app_id，微信为我们提供了<a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="external">沙盒环境</a>，如果多人同时使用，可以各自申请各自的测试账号，绑定到自己的域名上就可以了。</p>
<h3 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h3><p>刚开始开发的时候，第一个想到的就是到网上搜“微信内网穿透”，然后发现了<a href="https://ngrok.com/" target="_blank" rel="external">ngrok</a>，执行下面命令后，会返回一个随机的域名，然后这个域名的流量会转发到你当前机器上，因为开发环境需要通过Host头对应到不同的目录，所以使用<code>-host-header</code>直接重新Host头</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./ngrok http -host-header=xxx.domain.com xxx.domain.com:80</div></pre></td></tr></table></figure>
<p>然而，忽然有一天不知道为什么，怎么都连不上了。。。</p>
<p>这时，我发现ngrok竟然是个开源软件，到github下载下来后发现，官网提供的是2.0版本的服务，而开源的是1.X版本(没有重新Host功能)，所以放弃了。</p>
<h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>因为我有一台外网的阿里云服务器，想着看看有没有什么办法能利用起来，无意在网上发现了一条神奇的命令</p>
<p><code>ssh root@domain.com -R 10000:xxx.domain.com:80</code></p>
<p>对应的nginx配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">server_name</span> xxx.domain.com;</div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_pass</span> http://127.0.0.1:10000;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行后，会登陆远程的服务器，然后通过ssh服务将流量转发到本地的xxx.domain.com的80端口，太神奇了，之后也一直使用这条命令。</p>
<h3 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h3><p>最近开发人员变多了，不是所有人都有外网服务器，然后当有两个人同时需要开发测试的时候就有点尴尬了，本着找不到解决方法不睡觉的精神，我发现了一款国人写的类似ngrok的软件:<a href="https://github.com/fatedier/frp/" target="_blank" rel="external">frp</a></p>
<p>配置稍微麻烦了一点点，但是，这下可以同时支持多个人开发啦。</p>
<p>实现步骤如下：</p>
<h4 id="配置域名泛解析"><a href="#配置域名泛解析" class="headerlink" title="配置域名泛解析"></a>配置域名泛解析</h4><p>将外网域名配置泛解析,*.domain.com都指到阿里云服务器的IP</p>
<h4 id="配置nginx-注意反向代理的端口我使用了30000"><a href="#配置nginx-注意反向代理的端口我使用了30000" class="headerlink" title="配置nginx(注意反向代理的端口我使用了30000)"></a>配置nginx(注意反向代理的端口我使用了30000)</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">server_name</span> <span class="regexp">*.domain.com</span>;</div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">		<span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">		<span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</div><div class="line">		<span class="attribute">proxy_pass</span> http://127.0.0.1:30000;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="外网服务器frps配置"><a href="#外网服务器frps配置" class="headerlink" title="外网服务器frps配置"></a>外网服务器frps配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#frps.ini</div><div class="line">[common]</div><div class="line">#服务端口</div><div class="line">bind_port = 7000</div><div class="line"></div><div class="line">#虚拟端口</div><div class="line">vhost_http_port = 30000</div><div class="line"></div><div class="line">#dashboard端口和账号密码，可以直接加端口号方法，有一些统计数据</div><div class="line">dashboard_port = 7500</div><div class="line">dashboard_user = admin</div><div class="line">dashboard_pwd = admin</div><div class="line"></div><div class="line">#为了防止别人卵用，我们加上token</div><div class="line">privilege_token = Fiwlasdj&amp;^$fadf</div><div class="line"></div><div class="line">#心跳超时</div><div class="line">heartbeat_timeout = 90</div><div class="line"></div><div class="line">#最大连接池</div><div class="line">max_pool_count = 5</div><div class="line"></div><div class="line">#认证超时</div><div class="line">authentication_timeout = 900</div><div class="line"></div><div class="line">#子域名，配置后，客户端可以随便指定二级域名使用(方便多人)</div><div class="line">subdomain_host = domain.com</div><div class="line"></div><div class="line">#TCP 多路复用,不用可以删掉</div><div class="line">tcp_mux = true</div></pre></td></tr></table></figure>
<p>启用命令：<code>./frps -c ./frps.ini</code></p>
<h4 id="客户端frpc配置"><a href="#客户端frpc配置" class="headerlink" title="客户端frpc配置"></a>客户端frpc配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#frpc.ini</div><div class="line">[common]</div><div class="line">#外网服务器IP</div><div class="line">server_addr = x.x.x.x</div><div class="line"></div><div class="line">#外网服务端口号</div><div class="line">server_port = 7000</div><div class="line"></div><div class="line">#客户端启用连接池，指定预创建连接的数量</div><div class="line">pool_count = 1</div><div class="line"></div><div class="line">#和服务器的token保持一致</div><div class="line">privilege_token = Fiwlasdj&amp;^$fadf</div><div class="line"></div><div class="line">[web]</div><div class="line">#协议类型</div><div class="line">type = http</div><div class="line"></div><div class="line">#转发到本地的端口号</div><div class="line">local_port = 80</div><div class="line"></div><div class="line">#子域名，可以通过wx.domain.com访问到本地</div><div class="line">subdomain = wx</div><div class="line"></div><div class="line">#重新host header(按主要就要这个功能)</div><div class="line">host_header_rewrite = host.domain.com</div><div class="line"></div><div class="line">#本地Ip OR domain(这个官网并没有说明，下面我会讲为什么这样设置)</div><div class="line">local_ip = xxx.localhost.com</div><div class="line"></div><div class="line">#TCP 多路复用,不用可以删掉</div><div class="line">tcp_mux = true</div></pre></td></tr></table></figure>
<p>第一次使用没有配置<code>local_ip</code>，然后本地会报错<code>[E] [proxy.go:299] [web] connect to local service [127.0.0.1:80] error: dial tcp 127.0.0.1:80: getsockopt: connection refused</code>。</p>
<p>因为我的环境跑在vagrant里面，正常情况我都是通过绑定host到虚拟机的ip使用的，但是frp默认会访问127.0.0.1，然后看了一下源码对应的位置，如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">localConn, err := frpNet.ConnectServer(<span class="string">"tcp"</span>, fmt.Sprintf(<span class="string">"%s:%d"</span>, localInfo.LocalIp, localInfo.LocalPort))</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	workConn.Error(<span class="string">"connect to local service [%s:%d] error: %v"</span>, localInfo.LocalIp, localInfo.LocalPort, err)</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继续往上追踪</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> cfg.LocalIp = section[<span class="string">"local_ip"</span>]; cfg.LocalIp == <span class="string">""</span> &#123;</div><div class="line">	cfg.LocalIp = <span class="string">"127.0.0.1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原来可以指定local_ip参数来实现，不过之后的版本是否兼容，我就不清楚了，仰天一笑，哈哈哈哈。</p>
<p>启动命令：<code>./frpc -c ./frpc.ini</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近一直在做微信服务号的相关开发，其中一个特别麻烦的问题就是，如何在本地调试，将微信服务器的信息转发到自己的开发机上，下面为大家介绍几种我尝试过的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;微信公众号-服务号-对服务器的要求&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="微信开发" scheme="https://zhaojingxian.cn/categories/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微信" scheme="https://zhaojingxian.cn/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="内网穿透" scheme="https://zhaojingxian.cn/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
      <category term="ngrok" scheme="https://zhaojingxian.cn/tags/ngrok/"/>
    
      <category term="frp" scheme="https://zhaojingxian.cn/tags/frp/"/>
    
      <category term="ssh" scheme="https://zhaojingxian.cn/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>利用redis实现多属性快速查询</title>
    <link href="https://zhaojingxian.cn/2017/06/28/%E5%88%A9%E7%94%A8redis%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%B1%9E%E6%80%A7%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2/"/>
    <id>https://zhaojingxian.cn/2017/06/28/利用redis实现多属性快速查询/</id>
    <published>2017-06-28T14:58:47.000Z</published>
    <updated>2017-06-28T16:03:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前有两篇文章介绍了Redis中BitMap的用途和用法，有些小伙伴说这个东西好像没太大的用途，今天我给大家分享一个在实际场景中经常会碰到的情况，那就是多属性筛选</p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>拿京东举例，如下图</p>
<p><img src="/2017/06/28/利用redis实现多属性快速查询/select.jpg" alt="筛选"></p>
<p>我们要找一款电子琴，牌子有：雅马哈、卡西欧，价格有各种区间，各种颜色、不同的音色数。</p>
<p>现如今动不动就得整点高并发啥的，直接用mysql我们是不是真的扛不住？在前面加一层cache？怎么加？各种属性的组合存到一个属性组合成的key中？如何相对实时的更新属性？</p>
<p>之前的文章我有介绍过<code>redis</code>中<code>setbit</code>和<code>bitop</code>的使用方法，就是将某一位标记为1或者0代表存在不存在，然后利用<code>bitop</code>进行<code>AND</code>或者<code>OR</code>计算，得到我们想要的结果，今天我们就从零开始打造一个“高性能”的属性筛选器！</p>
<h3 id="按属性储存数据"><a href="#按属性储存数据" class="headerlink" title="按属性储存数据"></a>按属性储存数据</h3><p>假设现在我们有三款电子琴，一款雅马哈、两款卡西欧，具体的属性表格为:</p>
<table>
<thead>
<tr>
<th style="text-align:center">ID</th>
<th style="text-align:center">品牌</th>
<th style="text-align:center">颜色</th>
<th style="text-align:center">价格</th>
<th style="text-align:center">音色</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">雅马哈</td>
<td style="text-align:center">红色</td>
<td style="text-align:center">1000</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">卡西欧</td>
<td style="text-align:center">黑色</td>
<td style="text-align:center">2000</td>
<td style="text-align:center">150</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">卡西欧</td>
<td style="text-align:center">白色</td>
<td style="text-align:center">2000</td>
<td style="text-align:center">200</td>
</tr>
</tbody>
</table>
<p>我们将属性+属性值组合为key，ID为对应的某位偏移量，这样使用下面的语句初始化数据到redis</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化品牌</span></div><div class="line">$redis-&gt;setBit(<span class="string">'brand-雅马哈'</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">$redis-&gt;setBit(<span class="string">'brand-卡西欧'</span>, <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">$redis-&gt;setBit(<span class="string">'brand-卡西欧'</span>, <span class="number">3</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">//初始化颜色</span></div><div class="line">$redis-&gt;setBit(<span class="string">'color-红色'</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">$redis-&gt;setBit(<span class="string">'color-黑色'</span>, <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">$redis-&gt;setBit(<span class="string">'color-白色'</span>, <span class="number">3</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="comment">//初始化价格</span></div><div class="line">$redis-&gt;setBit(<span class="string">'price-1000'</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">$redis-&gt;setBit(<span class="string">'price-2000'</span>, <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">$redis-&gt;setBit(<span class="string">'price-2000'</span>, <span class="number">3</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">......</div></pre></td></tr></table></figure>
<h3 id="随意组合属性筛选"><a href="#随意组合属性筛选" class="headerlink" title="随意组合属性筛选"></a>随意组合属性筛选</h3><p>我想要搜一下，2000元的白色卡西欧，只需要这样</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$redis-&gt;bitop(<span class="string">'AND'</span>, <span class="string">'cacheKey'</span>, <span class="string">'brand-卡西欧'</span>, <span class="string">'color-白色'</span>);</div><div class="line">$redis-&gt;bitop(<span class="string">'AND'</span>, <span class="string">'cacheKey1'</span>, <span class="string">'cacheKey'</span>, <span class="string">'price-2000'</span>);</div></pre></td></tr></table></figure>
<p>结果cacheKey1的二进制形式为<code>001</code>，这样我们就知道搜索的结果是ID为3的商品。</p>
<p>然而redis并没有提供查询哪些位位1的方法，我们只能通过get方法将内容获取出来，自己处理。提供一段参考代码:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$bit = $redis-&gt;get($cacheKey);</div><div class="line"></div><div class="line">$bitLength = strlen($bit);</div><div class="line"><span class="comment">//redis返回的数据长度可能不是8的倍数，为了方便解包，我们将它补齐</span></div><div class="line"><span class="keyword">while</span>($bitLength % <span class="number">8</span> != <span class="number">0</span>) &#123;</div><div class="line">	$bitLength++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$bit = str_pad($bit, $bitLength, pack(<span class="string">'N'</span>, <span class="number">0</span>));</div><div class="line">$bit = unpack(<span class="string">'N*'</span>, $bit);</div><div class="line">$bit = array_filter($bit);</div><div class="line">$ids = [];</div><div class="line"><span class="keyword">foreach</span>($bit <span class="keyword">as</span> $k =&gt; $b) &#123;</div><div class="line">	$bitPos = [];</div><div class="line">	<span class="keyword">while</span>($b) &#123;</div><div class="line">		$bin = sprintf(<span class="string">'%032s'</span>, decbin($b));</div><div class="line">		$bitPos[] = strrpos($bin, <span class="string">'1'</span>);</div><div class="line">		$b &amp;= ($b - <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">foreach</span>($bitPos <span class="keyword">as</span> $pos) &#123;</div><div class="line">		$ids[] = ($k - <span class="number">1</span>) * <span class="number">32</span> + $pos;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我在本地试了一下，20W的数据(单个属性-属性值redis占用大概24k),同时搜索4个属性只需要不到10ms，当然现实中肯定没这么理想，但效果一定不会太差。</p>
<h3 id="优化setbit"><a href="#优化setbit" class="headerlink" title="优化setbit"></a>优化setbit</h3><p>如果商品和属性过多，对redis的写入压力是相当大的(商品数<em>属性数</em>属性值数的写入数)，我们可以先自行组合成字符串，然后单个属性-属性值对写入，具体实现细节就不写了，就是利用pack函数打包。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前有两篇文章介绍了Redis中BitMap的用途和用法，有些小伙伴说这个东西好像没太大的用途，今天我给大家分享一个在实际场景中经常会碰到的情况，那就是多属性筛选&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言
    
    </summary>
    
      <category term="redis" scheme="https://zhaojingxian.cn/categories/redis/"/>
    
    
      <category term="redis" scheme="https://zhaojingxian.cn/tags/redis/"/>
    
      <category term="多属性" scheme="https://zhaojingxian.cn/tags/%E5%A4%9A%E5%B1%9E%E6%80%A7/"/>
    
      <category term="搜索" scheme="https://zhaojingxian.cn/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="查询" scheme="https://zhaojingxian.cn/tags/%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>守护进程之PHP实现</title>
    <link href="https://zhaojingxian.cn/2017/03/31/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E4%B9%8BPHP%E5%AE%9E%E7%8E%B0/"/>
    <id>https://zhaojingxian.cn/2017/03/31/守护进程之PHP实现/</id>
    <published>2017-03-31T15:26:54.000Z</published>
    <updated>2017-03-31T16:20:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是守护进程"><a href="#什么是守护进程" class="headerlink" title="什么是守护进程"></a>什么是守护进程</h3><p>守护进程(daemon)是一种特殊的进程，它的生命周期很长，它在后台运行并且没有控制终端(这样可以保证守护进程不会接收到各种来自终端的信号)。<br>比如:crontab、sshd、nginx等，都会使用守护进程的形式运行，确保可以一直正常的提供服务。</p>
<h3 id="如何实现守护进程"><a href="#如何实现守护进程" class="headerlink" title="如何实现守护进程"></a>如何实现守护进程</h3><ul>
<li>fork子进程，父进程退出(当前子进程会成为init进程的子进程)</li>
<li>子进程调用setsid()，开启一个新会话，成为新的会话组长，并且释放于终端的关联关系</li>
<li>再次fork子进程，父进程退出(可以防止会话组长重新申请打开终端)</li>
<li>关闭打开的文件描述符</li>
<li>改变当前工作目录chdir</li>
<li>清除进程的umask</li>
</ul>
<h3 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * daemon(守护进程) PHP实现</div><div class="line"> * <span class="doctag">@author</span> zhjx922</div><div class="line"> */</div><div class="line"></div><div class="line">$pid = pcntl_fork();</div><div class="line"><span class="keyword">if</span> ($pid == <span class="number">-1</span>) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'创建子进程失败'</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($pid) &#123;</div><div class="line">    <span class="comment">//第一次退出父进程</span></div><div class="line">    <span class="keyword">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//setsid</span></div><div class="line">posix_setsid();</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"成功输出，脱离终端"</span> . PHP_EOL;</div><div class="line">sleep(<span class="number">5</span>);</div><div class="line"></div><div class="line">$pid = pcntl_fork();</div><div class="line"><span class="keyword">if</span> ($pid == <span class="number">-1</span>) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'创建子进程失败'</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($pid) &#123;</div><div class="line">    <span class="comment">//第二次退出父进程(之前fork出来的子进程)</span></div><div class="line">    <span class="keyword">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"依然可以输出"</span> . PHP_EOL;</div><div class="line">sleep(<span class="number">5</span>);</div><div class="line"></div><div class="line"><span class="comment">//关闭各种描述符</span></div><div class="line">@fclose(STDOUT);</div><div class="line">@fclose(STDERR);</div><div class="line">$STDOUT = fopen(<span class="string">'/dev/null'</span>, <span class="string">"a"</span>);</div><div class="line">$STDERR = fopen(<span class="string">'/dev/null'</span>, <span class="string">"a"</span>);</div><div class="line"></div><div class="line">chdir(<span class="string">'/'</span>);</div><div class="line"></div><div class="line">umask(<span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"这里不会输出, ps aux | grep daemon.php 查看进程,20s后退出"</span> . PHP_EOL;</div><div class="line">sleep(<span class="number">20</span>);</div></pre></td></tr></table></figure>
<h3 id="日常使用已经注意事项"><a href="#日常使用已经注意事项" class="headerlink" title="日常使用已经注意事项"></a>日常使用已经注意事项</h3><ul>
<li><code>php daemon.php &amp;</code> 这样使用，当关闭终端后，当前php进程也会同时关掉</li>
<li><code>nohup php daemon.php &gt; daemon.log &amp;</code> 终端关闭后，依然会继续运行</li>
<li>使用<code>supervisor</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是守护进程&quot;&gt;&lt;a href=&quot;#什么是守护进程&quot; class=&quot;headerlink&quot; title=&quot;什么是守护进程&quot;&gt;&lt;/a&gt;什么是守护进程&lt;/h3&gt;&lt;p&gt;守护进程(daemon)是一种特殊的进程，它的生命周期很长，它在后台运行并且没有控制终端(这样可以保
    
    </summary>
    
      <category term="PHP" scheme="https://zhaojingxian.cn/categories/PHP/"/>
    
    
      <category term="posix" scheme="https://zhaojingxian.cn/tags/posix/"/>
    
      <category term="守护进程" scheme="https://zhaojingxian.cn/tags/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="daemon" scheme="https://zhaojingxian.cn/tags/daemon/"/>
    
  </entry>
  
  <entry>
    <title>北京小客车摇号程序PHP版</title>
    <link href="https://zhaojingxian.cn/2017/03/19/%E5%8C%97%E4%BA%AC%E5%B0%8F%E5%AE%A2%E8%BD%A6%E6%91%87%E5%8F%B7%E7%A8%8B%E5%BA%8FPHP%E7%89%88/"/>
    <id>https://zhaojingxian.cn/2017/03/19/北京小客车摇号程序PHP版/</id>
    <published>2017-03-19T15:22:41.000Z</published>
    <updated>2017-03-21T03:46:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>相信很多北京本地or北漂一族摇了N年车牌号的人大有人在，作为一个即将加入摇号大军的程序员，带着好奇心查看了一下摇号相关的规则和程序，是否公平公正公开公…</p>
</blockquote>
<h3 id="官方信息"><a href="#官方信息" class="headerlink" title="官方信息"></a>官方信息</h3><p>温馨提示：摇号月的25日，在公证人员的公证下，工作人员按规则为审核通过的编码分配摇号基数序号，形成摇号池编码数据文件，并刻盘封存，将参与26日的摇号。26日摇号结束后，请您注意查询是否中签，中签后凭打印的“小客车配置指标确认通知书”办理购车手续。<br>特别说明：<br>1、摇号基数序号分配方法：首先，将当期所有审核通过的编码按从小到大的顺序分配序号；然后，第二阶梯及以上的编码按从小到大的顺序，接在后面继续分配序号；再然后，第三阶梯及以上的编码按从小到大的顺序，接在后面继续分配序号；以此类推。因此，高阶梯的编码所对应的多个摇号基数序号是不连号的，当期摇号基数序号总数=第一阶梯人数+第二阶梯人数×2+第三阶梯人数×3……<br>2、摇号方法：摇号程序从当期所有摇号基数序号中随机抽取中签者，高阶梯的编码对应多个摇号基数序号，于是享受了多倍的中签概率。摇号程序确保高阶梯编码的多个摇号基数序号最多只能摇中一个，当其中一个摇号基数序号中签，该编码即中签。</p>
<h3 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h3><p>1、摇号月的25日会将所有摇号的数据存放到数据文件(一个csv文件集合的压缩包，后面会提到，这个是我们写摇号程序的关键数据)<br>2、摇号月的26日会摇出一个6位的随机数(这个是用来计算中签的关键)<br>3、第几阶梯就会为对应阶梯的人分配几个摇号基础序号，比如A现在是第三阶梯，B是第二阶梯，C是第一阶梯，那么对应的排序就为<strong><em>ABCABA(123456)</em></strong></p>
<h3 id="官方摇号程序"><a href="#官方摇号程序" class="headerlink" title="官方摇号程序"></a>官方摇号程序</h3><p>为了公平公正，官方提供了可执行的摇号程序，已经对应摇号期数的摇号数据提供了下载。</p>
<p><img src="/2017/03/19/北京小客车摇号程序PHP版/yaohaochengxu.jpg" alt="摇号程序"></p>
<p>温馨提示了我们<code>Windows7操作系统，系统应当安装有.NET Framework 2.0</code>，既然是.NET，那我们就反编译一下，看看到底是怎么计算的~</p>
<a id="more"></a>
<h3 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h3><p>使用反编译工具<code>ILSPY</code>，直接搞定，我们会发现源程序是C#写的，关键代码放在<code>AllRandomPick.cs</code>中，其中最关键的两句为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Random random = new Random(allRandomPickData.Seed);</div><div class="line">pickNumber = random.Next(allRandomPickData.TotalNumber);</div></pre></td></tr></table></figure></p>
<p>Random为C#自带的随机函数<br>allRandomPickData.Seed 表示6位随机种子数<br>allRandomPickData.TotalNumber 表示摇号池编码数</p>
<p>这么看来，如果确保随机种子数是随机的话，这个算法可以认为是”绝对”公平的。<br>如果作弊的话，一是控制随机种子数，二是伪造摇号编码插入到对应的位置。<br>从此看来，大家还是乖乖摇号或者买新能源吧。。。</p>
<h3 id="提取C-随机数类"><a href="#提取C-随机数类" class="headerlink" title="提取C#随机数类"></a>提取C#随机数类</h3><p>官方虽然提供了C#版的摇号程序，但是作为世界上最好的语言PHP怎能不尝试一下呢？</p>
<p>从之前的文章 <a href="https://zhaojingxian.cn/2017/03/13/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E9%9A%8F%E6%9C%BA%E6%95%B0/">自己实现随机数</a>，我们不难发现，如果随机种子的固定的话，那么我们产生的随机数也是固定的。</p>
<p>但是不同语言的随机数实现方法是不同的，我们要向实现C#版的random，就必须知道C#纠结是如何生成随机数的。</p>
<p>感谢微软开源(不开源的话，可能没法用PHP实现了)，让我轻松的找到了对应的实现方法 <a href="https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/mscorlib/src/System/Random.cs" target="_blank" rel="external">https://github.com/dotnet/coreclr/blob/32f0f9721afb584b4a14d69135bea7ddc129f755/src/mscorlib/src/System/Random.cs</a></p>
<p>既然已经有了源代码，我们只要将C#翻译成PHP就可以了。</p>
<h3 id="分析压缩包"><a href="#分析压缩包" class="headerlink" title="分析压缩包"></a>分析压缩包</h3><p>官方提供了每期的压缩包，我们解压之后，能够看到一堆的文件列表，随便打开一个A列代表了当前的基础序号，B列代表了对应的摇号编码，如果随机到的基础序号对应的是你的编码，那么，就该恭喜你了。</p>
<h3 id="PHP实现"><a href="#PHP实现" class="headerlink" title="PHP实现"></a>PHP实现</h3><p>随机类有了，只要使用随机种子初始化随机类，然后在总编码数范围内随机，next…next…直到全部指标分配完就可以了，代码我放到了 <a href="https://github.com/zhjx922/yaohao" target="_blank" rel="external">github</a> 上，有兴趣的小伙伴可以阅读原文查看。</p>
<p>再放个最终的运行结果：</p>
<p><img src="/2017/03/19/北京小客车摇号程序PHP版/res.jpg" alt="摇号程序"></p>
<p>到官网上验证一下：</p>
<p><img src="/2017/03/19/北京小客车摇号程序PHP版/yanzheng.jpg" alt="摇号程序"></p>
<h3 id="摇号越久就越容易中么？"><a href="#摇号越久就越容易中么？" class="headerlink" title="摇号越久就越容易中么？"></a>摇号越久就越容易中么？</h3><p>不是，虽然你的倍数一直在增加，但是和你一起摇的人的倍数也在增加，后面加入的人也越来越多，毕竟指标数在变得越来越少。</p>
<h3 id="真的没办法提高概率了么？"><a href="#真的没办法提高概率了么？" class="headerlink" title="真的没办法提高概率了么？"></a>真的没办法提高概率了么？</h3><p>有，比如下方二维码试试</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;相信很多北京本地or北漂一族摇了N年车牌号的人大有人在，作为一个即将加入摇号大军的程序员，带着好奇心查看了一下摇号相关的规则和程序，是否公平公正公开公…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;官方信息&quot;&gt;&lt;a href=&quot;#官方信息&quot; class=&quot;headerlink&quot; title=&quot;官方信息&quot;&gt;&lt;/a&gt;官方信息&lt;/h3&gt;&lt;p&gt;温馨提示：摇号月的25日，在公证人员的公证下，工作人员按规则为审核通过的编码分配摇号基数序号，形成摇号池编码数据文件，并刻盘封存，将参与26日的摇号。26日摇号结束后，请您注意查询是否中签，中签后凭打印的“小客车配置指标确认通知书”办理购车手续。&lt;br&gt;特别说明：&lt;br&gt;1、摇号基数序号分配方法：首先，将当期所有审核通过的编码按从小到大的顺序分配序号；然后，第二阶梯及以上的编码按从小到大的顺序，接在后面继续分配序号；再然后，第三阶梯及以上的编码按从小到大的顺序，接在后面继续分配序号；以此类推。因此，高阶梯的编码所对应的多个摇号基数序号是不连号的，当期摇号基数序号总数=第一阶梯人数+第二阶梯人数×2+第三阶梯人数×3……&lt;br&gt;2、摇号方法：摇号程序从当期所有摇号基数序号中随机抽取中签者，高阶梯的编码对应多个摇号基数序号，于是享受了多倍的中签概率。摇号程序确保高阶梯编码的多个摇号基数序号最多只能摇中一个，当其中一个摇号基数序号中签，该编码即中签。&lt;/p&gt;
&lt;h3 id=&quot;解读&quot;&gt;&lt;a href=&quot;#解读&quot; class=&quot;headerlink&quot; title=&quot;解读&quot;&gt;&lt;/a&gt;解读&lt;/h3&gt;&lt;p&gt;1、摇号月的25日会将所有摇号的数据存放到数据文件(一个csv文件集合的压缩包，后面会提到，这个是我们写摇号程序的关键数据)&lt;br&gt;2、摇号月的26日会摇出一个6位的随机数(这个是用来计算中签的关键)&lt;br&gt;3、第几阶梯就会为对应阶梯的人分配几个摇号基础序号，比如A现在是第三阶梯，B是第二阶梯，C是第一阶梯，那么对应的排序就为&lt;strong&gt;&lt;em&gt;ABCABA(123456)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;官方摇号程序&quot;&gt;&lt;a href=&quot;#官方摇号程序&quot; class=&quot;headerlink&quot; title=&quot;官方摇号程序&quot;&gt;&lt;/a&gt;官方摇号程序&lt;/h3&gt;&lt;p&gt;为了公平公正，官方提供了可执行的摇号程序，已经对应摇号期数的摇号数据提供了下载。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/03/19/北京小客车摇号程序PHP版/yaohaochengxu.jpg&quot; alt=&quot;摇号程序&quot;&gt;&lt;/p&gt;
&lt;p&gt;温馨提示了我们&lt;code&gt;Windows7操作系统，系统应当安装有.NET Framework 2.0&lt;/code&gt;，既然是.NET，那我们就反编译一下，看看到底是怎么计算的~&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zhaojingxian.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="北京" scheme="https://zhaojingxian.cn/tags/%E5%8C%97%E4%BA%AC/"/>
    
      <category term="摇号" scheme="https://zhaojingxian.cn/tags/%E6%91%87%E5%8F%B7/"/>
    
      <category term="算法" scheme="https://zhaojingxian.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>超简单的PHP验证码识别</title>
    <link href="https://zhaojingxian.cn/2017/03/14/%E8%B6%85%E7%AE%80%E5%8D%95%E7%9A%84PHP%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    <id>https://zhaojingxian.cn/2017/03/14/超简单的PHP验证码识别/</id>
    <published>2017-03-14T14:35:44.000Z</published>
    <updated>2017-03-21T03:47:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>网站的登陆页、注册页等等等到处都是验证码，然而你的验证码真的安全么？也许只需要一段简单的小程序，你的验证码就会如同虚设。本文只是简单实现，不会太过深入。</p>
</blockquote>
<h3 id="有攻就有防"><a href="#有攻就有防" class="headerlink" title="有攻就有防"></a>有攻就有防</h3><p>写这篇文章完全是因为同事的公众号发了一篇文章叫”实践-写个验证码”，你简单写了一下，我就简单破解一些试试，生活处处有乐趣啊~</p>
<h3 id="生成验证码"><a href="#生成验证码" class="headerlink" title="生成验证码"></a>生成验证码</h3><p>Copy代码，执行，生成如下验证码：</p>
<p><img src="/2017/03/14/超简单的PHP验证码识别/vcode.jpg" alt="验证码"></p>
<p>如图我们能发现，这个验证码格式特别”规范”，字体大小一样，颜色都是黑色，让我们省了不少事儿。</p>
<a id="more"></a>
<h3 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h3><p>程序读图，二值化(关键点在于查找字体颜色的阈值，这个验证码都是黑色，so…)，通过程序一个像素点一个像素点判断，将属于字体颜色的标记为*，非字体颜色标记为0</p>
<p><img src="/2017/03/14/超简单的PHP验证码识别/er.jpg" alt="验证码"></p>
<center>从上面的图，能够大概看出验证码的样子(<code>YTAD</code>)</center>

<h3 id="分析图像，切割"><a href="#分析图像，切割" class="headerlink" title="分析图像，切割"></a>分析图像，切割</h3><p>切割出字符串(先切绿线，再分别切蓝线，这样即使这个字符上下移动一下，也不太容易影响我们的切割)</p>
<p><img src="/2017/03/14/超简单的PHP验证码识别/vcode2.jpg" alt="验证码"></p>
<h3 id="提取特征码"><a href="#提取特征码" class="headerlink" title="提取特征码"></a>提取特征码</h3><p>将字符串拆分后，我们多次获取验证码，将a-z,A-Z,0-9等验证码的特征码全部记录下来。</p>
<p><img src="/2017/03/14/超简单的PHP验证码识别/y.jpg" alt="验证码"></p>
<center>这个是提取出来的字母<code>Y</code></center>

<h3 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h3><p>识别的过程就是重复上面的：二值化-&gt;切割-&gt;提取特征码，再加上和之前提取的特征码比对相似度，就OK了。</p>
<h3 id="PHP代码实现"><a href="#PHP代码实现" class="headerlink" title="PHP代码实现"></a>PHP代码实现</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 简单验证码识别</div><div class="line"> * <span class="doctag">@author</span> zhjx922</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">vCode</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//字符特征码</span></div><div class="line">    <span class="keyword">private</span> $_wordKeys = <span class="keyword">array</span> (</div><div class="line">        <span class="string">'A'</span> =&gt; <span class="string">'000**00000****000**00**0**0000****0000****0000************0000****0000****0000**'</span>,</div><div class="line">        <span class="string">'B'</span> =&gt; <span class="string">'******00**000**0**0000****000**0******00**000**0**0000****0000****000**0******00'</span>,</div><div class="line">        <span class="string">'C'</span> =&gt; <span class="string">'00*****00**000****00000***000000**000000**000000**000000**00000*0**000**00*****0'</span>,</div><div class="line">        <span class="string">'D'</span> =&gt; <span class="string">'******00**000**0**0000****0000****0000****0000****0000****0000****000**0******00'</span>,</div><div class="line">        <span class="string">'E'</span> =&gt; <span class="string">'*********00000**00000**00000******0**00000**00000**00000**00000*******'</span>,</div><div class="line">        <span class="string">'F'</span> =&gt; <span class="string">'**********000000**000000**000000******00**000000**000000**000000**000000**000000'</span>,</div><div class="line">        <span class="string">'G'</span> =&gt; <span class="string">'00*****00**000****000000**000000**000000**000*****0000****0000**0**000**00*****0'</span>,</div><div class="line">        <span class="string">'H'</span> =&gt; <span class="string">'**0000****0000****0000****0000************0000****0000****0000****0000****0000**'</span>,</div><div class="line">        <span class="string">'I'</span> =&gt; <span class="string">'******00**0000**0000**0000**0000**0000**0000**0000**00******'</span>,</div><div class="line">        <span class="string">'J'</span> =&gt; <span class="string">'00****0000**0000**0000**0000**0000**0000***000****0**00***00'</span>,</div><div class="line">        <span class="string">'K'</span> =&gt; <span class="string">'**0000****000**0**00**00**0**000****0000****0000**0**000**00**00**000**0**0000**'</span>,</div><div class="line">        <span class="string">'L'</span> =&gt; <span class="string">'**00000**00000**00000**00000**00000**00000**00000**00000**00000*******'</span>,</div><div class="line">        <span class="string">'M'</span> =&gt; <span class="string">'**0000*****00*************0**0****0**0****0**0****0000****0000****0000****0000**'</span>,</div><div class="line">        <span class="string">'N'</span> =&gt; <span class="string">'**0000*****000******00******00****0**0****0**0****00******000*****000*****0000**'</span>,</div><div class="line">        <span class="string">'P'</span> =&gt; <span class="string">'*******0**0000****0000****0000*********0**000000**000000**000000**000000**000000'</span>,</div><div class="line">        <span class="string">'Q'</span> =&gt; <span class="string">'00****000**00**0**0000****0000****0000****0000****0**0****00****0**00**000****0*'</span>,</div><div class="line">        <span class="string">'R'</span> =&gt; <span class="string">'*******0**0000****0000****0000*********0*****000**00**00**000**0**0000****0000**'</span>,</div><div class="line">        <span class="string">'S'</span> =&gt; <span class="string">'0******0**0000****000000**0000000******0000000**000000**000000****0000**0******0'</span>,</div><div class="line">        <span class="string">'T'</span> =&gt; <span class="string">'********000**000000**000000**000000**000000**000000**000000**000000**000000**000'</span>,</div><div class="line">        <span class="string">'U'</span> =&gt; <span class="string">'**0000****0000****0000****0000****0000****0000****0000****0000**0**00**000****00'</span>,</div><div class="line">        <span class="string">'V'</span> =&gt; <span class="string">'**0000****0000****0000**0**00**00**00**00**00**000****0000****00000**000000**000'</span>,</div><div class="line">        <span class="string">'W'</span> =&gt; <span class="string">'**0000****0000****0000****0000****0**0****0**0****0**0*************00*****0000**'</span>,</div><div class="line">        <span class="string">'X'</span> =&gt; <span class="string">'**0000****0000**0**00**000****00000**000000**00000****000**00**0**0000****0000**'</span>,</div><div class="line">        <span class="string">'Y'</span> =&gt; <span class="string">'**0000****0000**0**00**000****00000**000000**000000**000000**000000**000000**000'</span>,</div><div class="line">        <span class="string">'Z'</span> =&gt; <span class="string">'*******00000**00000**0000**0000**0000**0000**0000**00000**00000*******'</span>,</div><div class="line">        <span class="string">'a'</span> =&gt; <span class="string">'00*****00**000**000000**0*********0000****000***0****0**'</span>,</div><div class="line">        <span class="string">'b'</span> =&gt; <span class="string">'**000000**000000**000000**0***00***00**0**0000****0000****0000*****00**0**0***00'</span>,</div><div class="line">        <span class="string">'c'</span> =&gt; <span class="string">'00*****00**000****000000**000000**0000000**000**00*****0'</span>,</div><div class="line">        <span class="string">'d'</span> =&gt; <span class="string">'000000**000000**000000**00***0**0**00*****0000****0000****0000**0**00***00***0**'</span>,</div><div class="line">        <span class="string">'e'</span> =&gt; <span class="string">'00****000**00**0**0000************0000000**000**00*****0'</span>,</div><div class="line">        <span class="string">'f'</span> =&gt; <span class="string">'000****000**00**00**00**00**000000**0000******0000**000000**000000**000000**0000'</span>,</div><div class="line">        <span class="string">'g'</span> =&gt; <span class="string">'0*****0***000*****000**0**000**00*****00**0000000******0**0000**0******0'</span>,</div><div class="line">        <span class="string">'h'</span> =&gt; <span class="string">'**000000**000000**000000**0***00***00**0**0000****0000****0000****0000****0000**'</span>,</div><div class="line">        <span class="string">'i'</span> =&gt; <span class="string">'00**0000**000000000***0000**0000**0000**0000**0000**00******'</span>,</div><div class="line">        <span class="string">'k'</span> =&gt; <span class="string">'**00000**00000**00000**00**0**0**00****000****000**0**00**00**0**000**'</span>,</div><div class="line">        <span class="string">'l'</span> =&gt; <span class="string">'***00**00**00**00**00**00**00**00**0****'</span>,</div><div class="line">        <span class="string">'m'</span> =&gt; <span class="string">'*0**0**0**0**0****0**0****0**0****0**0****0**0****0**0**'</span>,</div><div class="line">        <span class="string">'n'</span> =&gt; <span class="string">'**0***00***00**0**0000****0000****0000****0000****0000**'</span>,</div><div class="line">        <span class="string">'o'</span> =&gt; <span class="string">'00****000**00**0**0000****0000****0000**0**00**000****00'</span>,</div><div class="line">        <span class="string">'p'</span> =&gt; <span class="string">'**0***00***00**0**0000****0000****0000*****00**0**0***00**000000**000000'</span>,</div><div class="line">        <span class="string">'q'</span> =&gt; <span class="string">'00***0**0**00*****0000****0000****0000**0**00***00***0**000000**000000**'</span>,</div><div class="line">        <span class="string">'r'</span> =&gt; <span class="string">'**0****00***00**0**000000**000000**000000**000000**00000'</span>,</div><div class="line">        <span class="string">'s'</span> =&gt; <span class="string">'0******0**0000****0000000******0000000****0000**0******0'</span>,</div><div class="line">        <span class="string">'t'</span> =&gt; <span class="string">'00**000000**0000******0000**000000**000000**000000**000000**00**000****0'</span>,</div><div class="line">        <span class="string">'u'</span> =&gt; <span class="string">'**0000****0000****0000****0000****0000**0**00***00***0**'</span>,</div><div class="line">        <span class="string">'v'</span> =&gt; <span class="string">'**0000****0000**0**00**00**00**000****0000****00000**000'</span>,</div><div class="line">        <span class="string">'w'</span> =&gt; <span class="string">'**0000****0000****0**0****0**0****0**0**********0**00**0'</span>,</div><div class="line">        <span class="string">'x'</span> =&gt; <span class="string">'**0000**0**00**000****00000**00000****000**00**0**0000**'</span>,</div><div class="line">        <span class="string">'y'</span> =&gt; <span class="string">'**0000****0000****0000****0000****0000**0**00***00***0***00000**0******0'</span>,</div><div class="line">        <span class="string">'z'</span> =&gt; <span class="string">'******0000**000**000**000**000**0000******'</span>,</div><div class="line">        <span class="string">'0'</span> =&gt; <span class="string">'000**00000****000**00**0**0000****0000****0000****0000**0**00**000****00000**000'</span>,</div><div class="line">        <span class="string">'1'</span> =&gt; <span class="string">'00**000***00****0000**0000**0000**0000**0000**0000**00******'</span>,</div><div class="line">        <span class="string">'2'</span> =&gt; <span class="string">'00****000**00**0**0000**000000**00000**00000**00000**00000**00000**00000********'</span>,</div><div class="line">        <span class="string">'3'</span> =&gt; <span class="string">'0*****00**000**0000000**00000**0000***0000000**0000000**000000****000**00*****00'</span>,</div><div class="line">        <span class="string">'4'</span> =&gt; <span class="string">'00000**00000***0000****000**0**00**00**0**000**0********00000**000000**000000**0'</span>,</div><div class="line">        <span class="string">'5'</span> =&gt; <span class="string">'*******0**000000**000000**0***00***00**0000000**000000****0000**0**00**000****00'</span>,</div><div class="line">        <span class="string">'6'</span> =&gt; <span class="string">'00****000**00**0**0000*0**000000**0***00***00**0**0000****0000**0**00**000****00'</span>,</div><div class="line">        <span class="string">'7'</span> =&gt; <span class="string">'********000000**000000**00000**00000**00000**00000**00000**00000**000000**000000'</span>,</div><div class="line">        <span class="string">'8'</span> =&gt; <span class="string">'00****000**00**0**0000**0**00**000****000**00**0**0000****0000**0**00**000****00'</span>,</div><div class="line">        <span class="string">'9'</span> =&gt; <span class="string">'00****000**00**0**0000****0000**0**00***00***0**000000**0*0000**0**00**000****00'</span>,</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 生成验证码</div><div class="line">     * <span class="doctag">@author</span> 武老师</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">($verCode = <span class="string">''</span>)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">empty</span>($verCode)) &#123;</div><div class="line">            $baseChars     = <span class="string">'ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789'</span>;</div><div class="line">            $verCode       = <span class="string">''</span>;</div><div class="line">            $codeCharLenth = <span class="number">4</span>;</div><div class="line">            <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= $codeCharLenth; $i++) &#123;</div><div class="line">                <span class="comment">// 通过字符串下标形式随机获取</span></div><div class="line">                $verCode .= $baseChars&#123;mt_rand(<span class="number">0</span>, strlen($baseChars) - <span class="number">1</span>)&#125;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 以下代码是将生成的验证码生成图片</span></div><div class="line">        $font_size = <span class="number">20</span>;</div><div class="line">        $width     = <span class="number">60</span>;</div><div class="line">        $height    = <span class="number">30</span>;</div><div class="line">        $img       = imagecreate($width, $height); <span class="comment">// 新建一个基于调色板的图像</span></div><div class="line"></div><div class="line">        $bgR        = mt_rand(<span class="number">50</span>, <span class="number">200</span>); <span class="comment">//r(ed)</span></div><div class="line">        $bgG        = mt_rand(<span class="number">50</span>, <span class="number">200</span>); <span class="comment">//g(reen)</span></div><div class="line">        $bgB        = mt_rand(<span class="number">50</span>, <span class="number">200</span>); <span class="comment">//b(lue)</span></div><div class="line">        $background = imagecolorallocate($img, $bgR, $bgG, $bgB); <span class="comment">// 背景色</span></div><div class="line">        $black      = imagecolorallocate($img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">        imagestring($img, <span class="number">5</span>, <span class="number">9</span>, <span class="number">8</span>, $verCode, $black); <span class="comment">// 水平地画一行字符串</span></div><div class="line"></div><div class="line">        ob_start();</div><div class="line">        imagepng($img);</div><div class="line">        $image = ob_get_contents();</div><div class="line">        ob_end_clean();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(</div><div class="line">            <span class="string">'image'</span> =&gt;  $image,</div><div class="line">            <span class="string">'code'</span>  =&gt;  $verCode</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取原始图像数组</div><div class="line">     * <span class="doctag">@param</span> string $imageString</div><div class="line">     * <span class="doctag">@return</span> array</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getImage</span><span class="params">($imageString)</span> </span>&#123;</div><div class="line">        $im = imagecreatefromstring($imageString);</div><div class="line"></div><div class="line">        <span class="keyword">list</span>($width, $height) = getimagesizefromstring($imageString);</div><div class="line"></div><div class="line">        $image = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">        <span class="keyword">for</span>($x = <span class="number">0</span>;$x &lt; $width;$x++) &#123;</div><div class="line">            <span class="keyword">for</span>($y =<span class="number">0</span>;$y &lt; $height;$y++) &#123;</div><div class="line">                $rgb = imagecolorat($im, $x, $y);</div><div class="line">                $rgb = imagecolorsforindex($im, $rgb);</div><div class="line">                <span class="keyword">if</span>($rgb[<span class="string">'red'</span>] == <span class="number">0</span> &amp;&amp; $rgb[<span class="string">'green'</span>] == <span class="number">0</span> &amp;&amp; $rgb[<span class="string">'blue'</span>] == <span class="number">0</span>) &#123;</div><div class="line">                    $image[$y][$x] = <span class="string">'*'</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $image[$y][$x] = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 移除无用数据</div><div class="line">     * <span class="doctag">@param</span> array $image</div><div class="line">     * <span class="doctag">@return</span> array</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span><span class="params">($image)</span> </span>&#123;</div><div class="line">        <span class="comment">//计算x和y轴的</span></div><div class="line">        $xCount = count($image[<span class="number">0</span>]); <span class="comment">//60</span></div><div class="line">        $yCount = count($image); <span class="comment">//30</span></div><div class="line"></div><div class="line">        $xFilter = <span class="keyword">array</span>();</div><div class="line">        <span class="keyword">for</span>($x = <span class="number">0</span>;$x &lt; $xCount;$x++) &#123;</div><div class="line">            $filter = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">for</span>($y = <span class="number">0</span>;$y &lt; $yCount;$y++) &#123;</div><div class="line">                $filter = $filter &amp;&amp; ($image[$y][$x] == <span class="string">'0'</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($filter) &#123;</div><div class="line">                $xFilter[] = $x;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//有字符的列</span></div><div class="line">        $xImage = array_values(array_diff(range(<span class="number">0</span>, <span class="number">59</span>), $xFilter));</div><div class="line"></div><div class="line">        <span class="comment">//存放关键字</span></div><div class="line">        $wordImage = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">        $preX = $xImage[<span class="number">0</span>] - <span class="number">1</span>;</div><div class="line">        $wordCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">foreach</span>($xImage <span class="keyword">as</span> $xKey =&gt; $x) &#123;</div><div class="line">            <span class="keyword">if</span>($x != ($preX + <span class="number">1</span>)) &#123;</div><div class="line">                $wordCount++;</div><div class="line">            &#125;</div><div class="line">            $preX = $x;</div><div class="line"></div><div class="line">            <span class="keyword">for</span>($y = <span class="number">0</span>;$y &lt; $yCount;$y++) &#123;</div><div class="line">                $wordImage[$wordCount][$y][$x] = $image[$y][$x];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">foreach</span>($wordImage <span class="keyword">as</span> $key=&gt;$image) &#123;</div><div class="line">            $wordImage[$key] = <span class="keyword">$this</span>-&gt;removeByLine($image);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> $wordImage;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 按行移除无用数据</div><div class="line">     * <span class="doctag">@param</span> array $image</div><div class="line">     * <span class="doctag">@return</span> array</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">removeByLine</span><span class="params">($image)</span> </span>&#123;</div><div class="line"></div><div class="line">        $isFilter = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">foreach</span>($image <span class="keyword">as</span> $y =&gt; $yImage) &#123;</div><div class="line">            <span class="keyword">if</span>($isFilter == <span class="keyword">true</span> || array_filter($yImage)) &#123;</div><div class="line">                $isFilter = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">unset</span>($image[$y]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        krsort($image);</div><div class="line"></div><div class="line">        $isFilter = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">foreach</span>($image <span class="keyword">as</span> $y =&gt; $yImage) &#123;</div><div class="line">            <span class="keyword">if</span>($isFilter == <span class="keyword">true</span> || array_filter($yImage)) &#123;</div><div class="line">                $isFilter = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">unset</span>($image[$y]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ksort($image);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $image;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取关键字字符串</div><div class="line">     * <span class="doctag">@param</span> array $wordImage</div><div class="line">     * <span class="doctag">@return</span> string</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWordString</span><span class="params">($wordImage)</span> </span>&#123;</div><div class="line">        $wordString = <span class="string">''</span>;</div><div class="line">        <span class="keyword">foreach</span>($wordImage <span class="keyword">as</span> $image) &#123;</div><div class="line">            <span class="keyword">foreach</span>($image <span class="keyword">as</span> $string) &#123;</div><div class="line">                $wordString .= $string;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $wordString;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 匹配关键字</div><div class="line">     * <span class="doctag">@param</span> array $image</div><div class="line">     * <span class="doctag">@return</span> array</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">match</span><span class="params">($image)</span> </span>&#123;</div><div class="line">        $match = <span class="keyword">array</span>(</div><div class="line">            <span class="string">'min'</span> =&gt; <span class="string">''</span>,</div><div class="line">            <span class="string">'key'</span> =&gt; <span class="string">''</span></div><div class="line">        );</div><div class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;_wordKeys <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">            $percent = <span class="number">0.0</span>;</div><div class="line">            similar_text(<span class="keyword">$this</span>-&gt;getWordString($image), $v, $percent);</div><div class="line">            <span class="keyword">if</span>($match[<span class="string">'min'</span>] == <span class="string">''</span>) &#123;</div><div class="line">                $match[<span class="string">'min'</span>] = $percent;</div><div class="line">                $match[<span class="string">'key'</span>] = $k;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span>($percent &gt; $match[<span class="string">'min'</span>]) &#123;</div><div class="line">                    $match[<span class="string">'min'</span>] = $percent;</div><div class="line">                    $match[<span class="string">'key'</span>] = $k;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> $match;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 终端显示验证码</div><div class="line">     * <span class="doctag">@param</span> $image</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($image)</span> </span>&#123;</div><div class="line">        <span class="keyword">foreach</span>($image <span class="keyword">as</span> $xImage) &#123;</div><div class="line">            <span class="keyword">foreach</span>($xImage <span class="keyword">as</span> $yImage) &#123;</div><div class="line">                <span class="keyword">echo</span> $yImage;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">echo</span> PHP_EOL;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">echo</span> PHP_EOL;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">$vCode = <span class="keyword">new</span> vCode();</div><div class="line"></div><div class="line">$codeImage = $vCode-&gt;make();</div><div class="line">$imageString = $codeImage[<span class="string">'image'</span>];</div><div class="line"></div><div class="line">$image = $vCode-&gt;getImage($imageString);</div><div class="line"><span class="comment">//原图</span></div><div class="line">$vCode-&gt;show($image);</div><div class="line"></div><div class="line"><span class="comment">//去除干扰边框、拆字</span></div><div class="line">$newImage = $vCode-&gt;remove($image);</div><div class="line">$word = <span class="keyword">array</span>();</div><div class="line">$code = <span class="string">''</span>;</div><div class="line"><span class="keyword">foreach</span>($newImage <span class="keyword">as</span> $image) &#123;</div><div class="line">    $vCode-&gt;show($image);</div><div class="line">    $code .= $vCode-&gt;match($image)[<span class="string">'key'</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"生成的验证码为:&#123;$codeImage['code']&#125;"</span> . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">"识别的验证码为:&#123;$code&#125;"</span> . PHP_EOL;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">//用来批量生成验证码的特征码。识别他人网站验证码，需要自己采集多张，人肉标记特征码</div><div class="line">$vCode = new vCode();</div><div class="line"></div><div class="line">$string = 'ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789';</div><div class="line"></div><div class="line">$max = ceil(strlen($string) / 4);</div><div class="line"></div><div class="line">$wordKeys = array();</div><div class="line"></div><div class="line">for($i=0;$i&lt;$max;$i++) &#123;</div><div class="line">    $code = substr($string, $i * 4, 4);</div><div class="line">    $imageString = $vCode-&gt;make($code)['image'];</div><div class="line"></div><div class="line"></div><div class="line">    $image = $vCode-&gt;getImage($imageString);</div><div class="line">    $newImage = $vCode-&gt;remove($image);</div><div class="line">    foreach($newImage as $key =&gt; $image) &#123;</div><div class="line">        $word = $vCode-&gt;getWordString($image);</div><div class="line">        isset($code[$key]) &amp;&amp; $wordKeys[$code[$key]] = $word;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo var_export($wordKeys);</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/2017/03/14/超简单的PHP验证码识别/res.jpg" alt="验证码"></p>
<h3 id="推荐公众号"><a href="#推荐公众号" class="headerlink" title="推荐公众号"></a>推荐公众号</h3><p>文章最后推荐一下上面说到的公众号，更新频繁，特别适合初级以及基础不扎实的PHP程序员，作者武老师可是上过CCTV的人，如图：</p>
<p><img src="/2017/03/14/超简单的PHP验证码识别/wu.png" alt="验证码"></p>
<p><center>长按二维码，关注武老师公众号</center><br><img src="/2017/03/14/超简单的PHP验证码识别/weixin.jpeg" alt="验证码"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;网站的登陆页、注册页等等等到处都是验证码，然而你的验证码真的安全么？也许只需要一段简单的小程序，你的验证码就会如同虚设。本文只是简单实现，不会太过深入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;有攻就有防&quot;&gt;&lt;a href=&quot;#有攻就有防&quot; class=&quot;headerlink&quot; title=&quot;有攻就有防&quot;&gt;&lt;/a&gt;有攻就有防&lt;/h3&gt;&lt;p&gt;写这篇文章完全是因为同事的公众号发了一篇文章叫”实践-写个验证码”，你简单写了一下，我就简单破解一些试试，生活处处有乐趣啊~&lt;/p&gt;
&lt;h3 id=&quot;生成验证码&quot;&gt;&lt;a href=&quot;#生成验证码&quot; class=&quot;headerlink&quot; title=&quot;生成验证码&quot;&gt;&lt;/a&gt;生成验证码&lt;/h3&gt;&lt;p&gt;Copy代码，执行，生成如下验证码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/03/14/超简单的PHP验证码识别/vcode.jpg&quot; alt=&quot;验证码&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图我们能发现，这个验证码格式特别”规范”，字体大小一样，颜色都是黑色，让我们省了不少事儿。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://zhaojingxian.cn/categories/PHP/"/>
    
    
      <category term="验证码" scheme="https://zhaojingxian.cn/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
      <category term="图像识别" scheme="https://zhaojingxian.cn/tags/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>自己实现随机数</title>
    <link href="https://zhaojingxian.cn/2017/03/13/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>https://zhaojingxian.cn/2017/03/13/自己实现随机数/</id>
    <published>2017-03-13T15:28:25.000Z</published>
    <updated>2017-03-21T03:47:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>随机数函数rand大家一定都使用的炉火纯青了，但是如何你想自己实现一个rand函数该怎么办呢？这篇文章让我来简单介绍一下随机数的常用生成方法</p>
</blockquote>
<p>最近工作太忙，几乎没精力写文章，竟然有人催更，好在这段时间也没人取关，哈哈，那就小更一篇吧。</p>
<h3 id="真假随机数"><a href="#真假随机数" class="headerlink" title="真假随机数"></a>真假随机数</h3><p>其实计算机中的随机数都是伪随机数，因为它并不是真正随机的。只有完全无法预测下一次的数字才能算是真正的随机数。<br>相抵比较”真随机”的方法有：通过当前温度+PM2.5+风力…、CPU温度+内存条温度+…。重点在于无法预测，但是这些随机数获取的成本也相对比较大。</p>
<h3 id="线性同余法"><a href="#线性同余法" class="headerlink" title="线性同余法"></a>线性同余法</h3><p>大部分语言的随机数都是通过”线性同余法”生成的，这是什么鬼方程(哪位好学生给科普一下)？我们不管原理，只管实现~<br>线性同余法的方程为：<code>N2 = (A X N1 + B) % M</code>，仅当B能够被A与M的最大公约数整除，此方程有解。我们只要保证A和M互质就可以了。</p>
<a id="more"></a>
<p>下面是我用PHP的简单实现，如有错误，随便指出：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 伪随机数</div><div class="line"> * <span class="doctag">@author</span> zhjx922</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rand</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> $_sRand;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_sRand = substr(microtime(<span class="keyword">true</span>), <span class="number">-3</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 种子生成器</div><div class="line">     * <span class="doctag">@return</span> string</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">sRand</span><span class="params">()</span> </span>&#123;</div><div class="line">        $a = <span class="number">33773</span>;</div><div class="line">        $b = <span class="number">97613</span>;</div><div class="line">        $m = <span class="number">65536</span>;</div><div class="line">        <span class="keyword">$this</span>-&gt;_sRand = bcmod(bcadd(bcmul($a, <span class="keyword">$this</span>-&gt;_sRand), $b), $m);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_sRand;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询随机数</div><div class="line">     * <span class="doctag">@param</span> $start</div><div class="line">     * <span class="doctag">@param</span> $end</div><div class="line">     * <span class="doctag">@return</span> string</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rand</span><span class="params">($start, $end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>($start == $end) &#123;</div><div class="line">            <span class="keyword">return</span> $start;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>($start &gt; $end) &#123;</div><div class="line">            $max = $start;</div><div class="line">            $min = $end;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $max = $end;</div><div class="line">            $min = $start;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $sub = $max - $min;</div><div class="line">        <span class="keyword">return</span> (int)bcmod(<span class="keyword">$this</span>-&gt;sRand(), $sub + <span class="number">1</span>) + $min;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">$rand = <span class="keyword">new</span> Rand();</div><div class="line"></div><div class="line">$randNum = <span class="keyword">array</span>();</div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">10000</span>;$i++) &#123;</div><div class="line">    $num = $rand-&gt;rand(<span class="number">-50</span>, <span class="number">-66</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($randNum[$num])) &#123;</div><div class="line">        $randNum[$num]++;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $randNum[$num] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ksort($randNum);</div><div class="line">var_dump($randNum);</div></pre></td></tr></table></figure>
<p>大家可以复制代码到本地跑一下，看看生成的效果如何，生成的随机数是否足够”随机”</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;随机数函数rand大家一定都使用的炉火纯青了，但是如何你想自己实现一个rand函数该怎么办呢？这篇文章让我来简单介绍一下随机数的常用生成方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近工作太忙，几乎没精力写文章，竟然有人催更，好在这段时间也没人取关，哈哈，那就小更一篇吧。&lt;/p&gt;
&lt;h3 id=&quot;真假随机数&quot;&gt;&lt;a href=&quot;#真假随机数&quot; class=&quot;headerlink&quot; title=&quot;真假随机数&quot;&gt;&lt;/a&gt;真假随机数&lt;/h3&gt;&lt;p&gt;其实计算机中的随机数都是伪随机数，因为它并不是真正随机的。只有完全无法预测下一次的数字才能算是真正的随机数。&lt;br&gt;相抵比较”真随机”的方法有：通过当前温度+PM2.5+风力…、CPU温度+内存条温度+…。重点在于无法预测，但是这些随机数获取的成本也相对比较大。&lt;/p&gt;
&lt;h3 id=&quot;线性同余法&quot;&gt;&lt;a href=&quot;#线性同余法&quot; class=&quot;headerlink&quot; title=&quot;线性同余法&quot;&gt;&lt;/a&gt;线性同余法&lt;/h3&gt;&lt;p&gt;大部分语言的随机数都是通过”线性同余法”生成的，这是什么鬼方程(哪位好学生给科普一下)？我们不管原理，只管实现~&lt;br&gt;线性同余法的方程为：&lt;code&gt;N2 = (A X N1 + B) % M&lt;/code&gt;，仅当B能够被A与M的最大公约数整除，此方程有解。我们只要保证A和M互质就可以了。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zhaojingxian.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="随机数" scheme="https://zhaojingxian.cn/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
      <category term="线性同余" scheme="https://zhaojingxian.cn/tags/%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99/"/>
    
      <category term="伪随机数" scheme="https://zhaojingxian.cn/tags/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>加密算法之非对称加密</title>
    <link href="https://zhaojingxian.cn/2017/02/27/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B9%8B%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>https://zhaojingxian.cn/2017/02/27/加密算法之非对称加密/</id>
    <published>2017-02-27T12:25:29.000Z</published>
    <updated>2017-03-21T03:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>上篇文章介绍了对称加密的原理，但是它的最大问题就是加密和解密的密钥是相同的，并且不能保证密钥能安全的送到双方手里，即使安全的送到双方手里，免不了内部会有”卧底”的存在</p>
</blockquote>
<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>既然有对称加密，那么自然会联想到非对称加密。非对称加密的核心在于加密和解密使用的是不同的密钥，如何做到使用不同的密钥呢？<br>比如我有一个只能用钥匙打开的存钱罐，平时大家只能把零钱放到储钱罐中，但是只有我才有取钱的钥匙。放到储钱罐的硬币可以看成加密后的内容，而只有用钥匙才能将”加密”后的硬币取出来。<br>这样我们就可以把用来加密的密钥(公钥)给了任何人，我们只要自己保存好解密的密钥(私钥)就可以安全的保护我们的数据。<br>非对称算法有很多:RSA、Elgamal、背包算法、Rabin、D-H、ECC等，下面我们来简单介绍一下RSA算法。</p>
<h3 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h3><p>RSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。1987年首次公布，当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的(啥时候以我名字命名一个呢)。<br>RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，已被ISO推荐为公钥数据加密标准。</p>
<h3 id="RSA加密-amp-amp-RSA解密公式"><a href="#RSA加密-amp-amp-RSA解密公式" class="headerlink" title="RSA加密&amp;&amp;RSA解密公式"></a>RSA加密&amp;&amp;RSA解密公式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//注意：明文为数字，实际计算过程我们可以通过ASCII码转换</div><div class="line">密文 = (明文 ^ E) % N; //其中的E和N就是我们的公钥</div><div class="line"></div><div class="line">明文 = (密文 ^ D) % N; //其中的D和N就是我们的私钥</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="计算公钥-E-、私钥-D-和数字-N"><a href="#计算公钥-E-、私钥-D-和数字-N" class="headerlink" title="计算公钥(E)、私钥(D)和数字(N)"></a>计算公钥(E)、私钥(D)和数字(N)</h3><p>公钥和私钥不是随便弄几个数字就可以的，是经过严格的数学公式计算出来的。</p>
<h4 id="1、随机准备两个质数P和Q-计算乘积得到N"><a href="#1、随机准备两个质数P和Q-计算乘积得到N" class="headerlink" title="1、随机准备两个质数P和Q,计算乘积得到N"></a>1、随机准备两个质数P和Q,计算乘积得到N</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">N = P * Q;</div></pre></td></tr></table></figure>
<h4 id="2、计算L"><a href="#2、计算L" class="headerlink" title="2、计算L"></a>2、计算L</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">L = (P - 1) * (Q - 1); //图解密码技术中说需要计算乘积之后的最小公倍数，但是经过代码测试并不准确，哪位大侠了解麻烦留言告知一下~</div></pre></td></tr></table></figure>
<h4 id="3、计算E-公钥-，用来给加密方使用"><a href="#3、计算E-公钥-，用来给加密方使用" class="headerlink" title="3、计算E(公钥)，用来给加密方使用"></a>3、计算E(公钥)，用来给加密方使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//E需要同时满足下面两个条件</div><div class="line">1. 1 &lt; E &lt; L</div><div class="line">2. E和L的最大公约数为一(欧几里得算法，这些恶魔啊，E和L必须互质，这样才能保证一定可以计算出私钥D)</div></pre></td></tr></table></figure>
<h4 id="4、计算D-私钥-，用来给解密方使用"><a href="#4、计算D-私钥-，用来给解密方使用" class="headerlink" title="4、计算D(私钥)，用来给解密方使用"></a>4、计算D(私钥)，用来给解密方使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//D需要满足下面公式</div><div class="line">(E * D) % L = 1; //想要保证结果为1，E和L必须互质!!!</div></pre></td></tr></table></figure>
<p>上面就是整个计算过程，为了保证数据的安全现实中，P和Q会选用特别大的数(1024比特或者更大)</p>
<h3 id="RSA的加密和解密"><a href="#RSA的加密和解密" class="headerlink" title="RSA的加密和解密"></a>RSA的加密和解密</h3><p>上面已经提到过加密和解密的方法，我们用具体的数字实践一下，加深理解吧。</p>
<h4 id="1、求N-P-Q"><a href="#1、求N-P-Q" class="headerlink" title="1、求N(P*Q)"></a>1、求N(P*Q)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">假设:P = 7、Q = 11(均为质数)</div><div class="line">那么:N = P * Q = 7 * 11 = 77</div></pre></td></tr></table></figure>
<h4 id="2、求L-P-1-Q-1"><a href="#2、求L-P-1-Q-1" class="headerlink" title="2、求L ((P - 1) * (Q - 1))"></a>2、求L ((P - 1) * (Q - 1))</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">L = (P - 1) * (Q - 1) = 6 * 10 = 60</div></pre></td></tr></table></figure>
<h4 id="3、求E"><a href="#3、求E" class="headerlink" title="3、求E"></a>3、求E</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1 &lt; E &lt; 60</div><div class="line">E和L的最大公约数为一，我们假设E=23</div></pre></td></tr></table></figure>
<h4 id="4、计算D-E-D-L-1"><a href="#4、计算D-E-D-L-1" class="headerlink" title="4、计算D ((E * D) % L = 1)"></a>4、计算D ((E * D) % L = 1)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(23 * D) % 60 = 1;</div><div class="line">D = 47;</div></pre></td></tr></table></figure>
<p>那么我就得到了公钥(E=23,N=77),私钥(D=47,N=77)</p>
<h4 id="加密-amp-amp-解密"><a href="#加密-amp-amp-解密" class="headerlink" title="加密&amp;&amp;解密"></a>加密&amp;&amp;解密</h4><p>我们假设需要加密数字:12<br>公式:密文 = (明文 ^ E) % N;<br>12 ^ 23 % 77 = 6624737266949237011120128 % 77 = 45;<br>这个45就是我们加密后的密文</p>
<p>解密<br>公式:明文 = (密文 ^ D) % N;<br>45 ^ 47 % 77 = 502328880013965819626664594350710696732674427522624682751484215259552001953125 % 77 = 12;<br>得出原文:12</p>
<h3 id="PHP示例"><a href="#PHP示例" class="headerlink" title="PHP示例"></a>PHP示例</h3><p>下面是我用PHP实现的加密&amp;解密示例，供大家参考(因为指数运算的结果集会很大，我们必须使用PHP中提供的BC Math系列函数计算)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 冒牌RSA算法</div><div class="line"> * <span class="doctag">@author</span> zhjx922</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断数字是否为质数</div><div class="line"> * <span class="doctag">@param</span> $num</div><div class="line"> * <span class="doctag">@return</span> bool</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrimeNumber</span><span class="params">($num)</span> </span>&#123;</div><div class="line">    $k = <span class="number">0</span>;<span class="comment">//定义次数变量</span></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= $num; $i++) &#123;</div><div class="line">        <span class="keyword">if</span> (bcmod($num, $i) == <span class="number">0</span>) &#123;</div><div class="line">            $k++;<span class="comment">//如果取模等于0，次数k自加</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($k == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//求最小公倍数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">minMultiple</span><span class="params">($a, $b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>($b==<span class="number">0</span>)     <span class="comment">//一定要考虑除数不能为零</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> $b;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        $m = bccomp($a, $b) == <span class="number">1</span> ? $a : $b;</div><div class="line">        $n = bccomp($b, $a) == <span class="number">1</span> ? $b : $a;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>($i=<span class="number">2</span>; ; $i++)</div><div class="line">        &#123;</div><div class="line">            $mul = bcmul($m, $i);</div><div class="line">            <span class="keyword">if</span>(bcmod($mul, $n) == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> $mul;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> bcmul($a, $b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//求最大公约数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxDivisor</span><span class="params">($a,$b)</span></span></div><div class="line">&#123;</div><div class="line">    $n = bccomp($a, $b) == <span class="number">1</span> ? $b : $a;</div><div class="line">    <span class="keyword">for</span>($i = $n; $i&gt;<span class="number">1</span>; $i--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(bcmod($a, $i) == <span class="number">0</span> &amp;&amp; bcmod($b, $i) == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> $i;   <span class="comment">//此处如果用echo $i;则输出结果为432；故应区分echo、return的区别</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">    <span class="comment">//随机一个质数P</span></div><div class="line">    $p = mt_rand(<span class="number">101</span>, <span class="number">197</span>);</div><div class="line">&#125; <span class="keyword">while</span>(!isPrimeNumber($p));</div><div class="line"></div><div class="line"><span class="keyword">do</span>&#123;</div><div class="line">    <span class="comment">//随机一个质数Q</span></div><div class="line">    $q = mt_rand(<span class="number">101</span>, <span class="number">197</span>);</div><div class="line">&#125; <span class="keyword">while</span>(!isPrimeNumber($q));</div><div class="line"></div><div class="line"></div><div class="line">$n = bcmul($p, $q);</div><div class="line"></div><div class="line"><span class="comment">//$l = minMultiple($p - 1, $q - 1); //经测试不可用</span></div><div class="line">$l = bcmul($p - <span class="number">1</span>, $q - <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    $e = mt_rand(<span class="number">2</span>, $l - <span class="number">1</span>);</div><div class="line">&#125;<span class="keyword">while</span>(maxDivisor($e, $l) != <span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">$d = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span>(bcmod(bcmul($e,++$d), $l) != <span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">'p:'</span> . $p . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">'q:'</span> . $q . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">'n:'</span> . $n . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">'l:'</span> . $l . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">'e:'</span> . $e . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">'d:'</span> . $d . PHP_EOL;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"公钥:e=&#123;$e&#125;,n=&#123;$n&#125;"</span> . PHP_EOL;</div><div class="line"><span class="keyword">echo</span> <span class="string">"私钥:d=&#123;$d&#125;,n=&#123;$n&#125;"</span> . PHP_EOL;</div><div class="line"></div><div class="line"><span class="comment">//加密</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">($e, $n, $string)</span> </span>&#123;</div><div class="line">    $enString = <span class="string">''</span>;</div><div class="line">    $len = strlen($string);</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $len; $i++) &#123;</div><div class="line">        $pow = bcpow(ord($string&#123;$i&#125;), $e);</div><div class="line">        $mod = bcmod($pow, $n);</div><div class="line">        $enString .= pack(<span class="string">'L'</span>, $mod);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $enString;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//解密</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span><span class="params">($d, $n, $string)</span> </span>&#123;</div><div class="line">    $deString = <span class="string">''</span>;</div><div class="line">    $string = unpack(<span class="string">'L*'</span>, $string);</div><div class="line">    $len = count($string);</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">1</span>; $i &lt;= $len; $i++) &#123;</div><div class="line">        $pow = bcpow($string[$i], $d);</div><div class="line">        $mod = bcmod($pow, $n);</div><div class="line">        $deString .= chr($mod);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $deString;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">$startTime = microtime(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">$string = <span class="string">'欢迎关注"假装是个程序员"公众号'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"原文:"</span> . $string . PHP_EOL;</div><div class="line"></div><div class="line">$encodeString = encode($e, $n, $string);</div><div class="line"><span class="keyword">echo</span> <span class="string">"密文:"</span> . $encodeString . PHP_EOL;</div><div class="line"></div><div class="line">$decodeString = decode($d, $n, $encodeString);</div><div class="line"><span class="keyword">echo</span> <span class="string">"解密后:"</span> . $decodeString . PHP_EOL;</div><div class="line"></div><div class="line"></div><div class="line">$endTime = microtime(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"Total:"</span> . ($endTime - $startTime) . <span class="string">'s.'</span> . PHP_EOL;</div></pre></td></tr></table></figure>
<h3 id="没有绝对安全的加密方式"><a href="#没有绝对安全的加密方式" class="headerlink" title="没有绝对安全的加密方式"></a>没有绝对安全的加密方式</h3><p>没有什么加密方式能一直保持绝对的安全，尤其常用的MD5，如果你的数据库中密码还是使用MD5的哈希结果不要笑话人家直接用明文存密码的人，五十步笑百步而已。。。<br>最近谷歌宣布破解了SHA-1，随着计算能力的提高，SHA-256，RSA等等也是迟早的事儿。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;上篇文章介绍了对称加密的原理，但是它的最大问题就是加密和解密的密钥是相同的，并且不能保证密钥能安全的送到双方手里，即使安全的送到双方手里，免不了内部会有”卧底”的存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;非对称加密&quot;&gt;&lt;a href=&quot;#非对称加密&quot; class=&quot;headerlink&quot; title=&quot;非对称加密&quot;&gt;&lt;/a&gt;非对称加密&lt;/h3&gt;&lt;p&gt;既然有对称加密，那么自然会联想到非对称加密。非对称加密的核心在于加密和解密使用的是不同的密钥，如何做到使用不同的密钥呢？&lt;br&gt;比如我有一个只能用钥匙打开的存钱罐，平时大家只能把零钱放到储钱罐中，但是只有我才有取钱的钥匙。放到储钱罐的硬币可以看成加密后的内容，而只有用钥匙才能将”加密”后的硬币取出来。&lt;br&gt;这样我们就可以把用来加密的密钥(公钥)给了任何人，我们只要自己保存好解密的密钥(私钥)就可以安全的保护我们的数据。&lt;br&gt;非对称算法有很多:RSA、Elgamal、背包算法、Rabin、D-H、ECC等，下面我们来简单介绍一下RSA算法。&lt;/p&gt;
&lt;h3 id=&quot;RSA算法&quot;&gt;&lt;a href=&quot;#RSA算法&quot; class=&quot;headerlink&quot; title=&quot;RSA算法&quot;&gt;&lt;/a&gt;RSA算法&lt;/h3&gt;&lt;p&gt;RSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。1987年首次公布，当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的(啥时候以我名字命名一个呢)。&lt;br&gt;RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，已被ISO推荐为公钥数据加密标准。&lt;/p&gt;
&lt;h3 id=&quot;RSA加密-amp-amp-RSA解密公式&quot;&gt;&lt;a href=&quot;#RSA加密-amp-amp-RSA解密公式&quot; class=&quot;headerlink&quot; title=&quot;RSA加密&amp;amp;&amp;amp;RSA解密公式&quot;&gt;&lt;/a&gt;RSA加密&amp;amp;&amp;amp;RSA解密公式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//注意：明文为数字，实际计算过程我们可以通过ASCII码转换&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;密文 = (明文 ^ E) % N; //其中的E和N就是我们的公钥&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;明文 = (密文 ^ D) % N; //其中的D和N就是我们的私钥&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="加密算法" scheme="https://zhaojingxian.cn/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="加密算法" scheme="https://zhaojingxian.cn/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
      <category term="对称加密" scheme="https://zhaojingxian.cn/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
      <category term="RSA" scheme="https://zhaojingxian.cn/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>加密算法之对称加密</title>
    <link href="https://zhaojingxian.cn/2017/02/19/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E4%B9%8B%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>https://zhaojingxian.cn/2017/02/19/加密算法之对称加密/</id>
    <published>2017-02-19T15:38:22.000Z</published>
    <updated>2017-03-21T03:47:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在互联网如此发达的年代，信息的安全也变得越来越重要，我们也使用了各式各样的加密手段来保护数据的安全，但是各种加密算法你真的了解它么？他们的原理又是什么呢？<br>常见的加密分为对称加密、非对称加密还有散列算法(严格来说，散列不算加密)，这篇文章我们来了解一下对称加密</p>
</blockquote>
<h3 id="传递甜甜蜜蜜小纸条"><a href="#传递甜甜蜜蜜小纸条" class="headerlink" title="传递甜甜蜜蜜小纸条"></a>传递甜甜蜜蜜小纸条</h3><p>穿越到初中的你，凭借着程序员”高贵”的气息成功的和一个小女生”勾搭”上了。<br>然而在那个不是谁都有手机的年代，上课的时候想和她传递信息，貌似只能写在纸上，然后借助同学之手，慢慢传递。最关键的是，万一某个同学好奇心太重偷偷看到你们的”甜甜蜜蜜”，你也许会不太爽吧？<br>作为一个从未来穿越回来的程序员，你立马在周末的时候买了两本班上谁都没有的大字典(康熙字典)，从此你俩的小纸条上出现的是如下的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">123:5 564:3 11:8</div><div class="line"></div><div class="line">665:2 123:3 456:6 789:2...</div></pre></td></tr></table></figure>
<p><strong><em>123(代表页码):5(代表行)</em></strong></p>
<p>从此之后，妹子再也不理你了(查字典太TM麻烦！)。。。<br>当然藏头诗也可以看做一种加密手段，前提是：你会写诗。。。</p>
<a id="more"></a>
<h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>对称加密简单来说就是使用<code>同一密钥</code>加密和解密内容，双方使用的密钥必须是相同的(其他任何人都不知道)，这样才能保证内容的安全(正如上面的传递小纸条)。<br>常见的对称加密算法有DES、3DES、AES、Blowfish等，它们的复杂程度也各不相等。<br>那么在计算机中如何做到类似上面小纸条的加密手段呢？</p>
<h3 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h3><p>ASCII大家应该都熟悉，通过7位或者8位来表示一个字符，比如<code>65</code>表示字符<code>A</code>，<code>66</code>表示字符<code>B</code>，对应的二进制形式为：</p>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">二进制形式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">01000001</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">01000010</td>
</tr>
</tbody>
</table>
<h3 id="异或运算的特性"><a href="#异或运算的特性" class="headerlink" title="异或运算的特性"></a>异或运算的特性</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span> ^ <span class="number">0</span> = <span class="number">0</span>;</div><div class="line"><span class="number">0</span> ^ <span class="number">1</span> = <span class="number">1</span>;</div><div class="line"><span class="number">1</span> ^ <span class="number">0</span> = <span class="number">1</span>;</div><div class="line"><span class="number">1</span> ^ <span class="number">1</span> = <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>相同异或等于0，不同为1，然后我们把<code>^</code>和<code>=</code>对换一下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span> = <span class="number">0</span> ^ <span class="number">0</span>;</div><div class="line"><span class="number">0</span> = <span class="number">1</span> ^ <span class="number">1</span>;</div><div class="line"><span class="number">1</span> = <span class="number">0</span> ^ <span class="number">1</span>;</div><div class="line"><span class="number">1</span> = <span class="number">1</span> ^ <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>依然成立，为了更形象的说明，我们把上面的等式假设为：<code>A ^ B = C</code><br>我们只要把结果C与B进行异或运算就会得到结果A，对称加密的精髓就在这里！</p>
<h3 id="PHP实现一个最简单的对称加密算法"><a href="#PHP实现一个最简单的对称加密算法" class="headerlink" title="PHP实现一个最简单的对称加密算法"></a>PHP实现一个最简单的对称加密算法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是我们的加密key</span></div><div class="line">$key = <span class="string">'[Lvn[o]6e&#123;y=q#82]G.]rDzv.j'</span>;</div><div class="line">$keyLen = strlen($key);</div><div class="line"></div><div class="line"><span class="comment">//准备加密的内容</span></div><div class="line">$string = <span class="string">'大家好，欢迎关注假装是个程序员！'</span>;</div><div class="line"></div><div class="line"><span class="comment">//被加密的内容长度</span></div><div class="line">$stringLen = strlen($string);</div><div class="line"></div><div class="line"><span class="comment">//如果加密key没有内容长，那么我们不断重复key，直到大于等于被加密内容(当然在实际使用中，这不是个好方法)</span></div><div class="line"><span class="keyword">if</span>($keyLen &lt; $stringLen) &#123;</div><div class="line">    $key = str_pad($key, $stringLen, $key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$content = <span class="string">''</span>;</div><div class="line"><span class="comment">//每个字节与对应的key做异或运算</span></div><div class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $stringLen; $i++) &#123;</div><div class="line">    $content .= chr(ord($string[$i]) ^ ord($key[$i]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//这个就是我们加密后的密文</span></div><div class="line">var_dump($content);</div><div class="line"><span class="comment">//输出:string(48) "��ы�ٸ�ؔű��������������ܤ������ў��Ƃ��ֶ���"</span></div><div class="line"></div><div class="line"><span class="comment">//为了提高可读性，一般会将加密后的字符通过base64编码</span></div><div class="line">var_dump(base64_encode($content));</div><div class="line"><span class="comment">//输出:string(64) "vujRi/XZuJPYlMWxl4+a2uLJy9jBosney+vcpNXrvffy0t3RnpX6xoK9uNa2ss7F"</span></div><div class="line"></div><div class="line"><span class="comment">//解密</span></div><div class="line">$string = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $stringLen; $i++) &#123;</div><div class="line">    $string .= chr(ord($content[$i]) ^ ord($key[$i]));</div><div class="line">&#125;</div><div class="line"></div><div class="line">var_dump($string);</div><div class="line"><span class="comment">//输出:string(48) "大家好，欢迎关注假装是个程序员！"</span></div></pre></td></tr></table></figure>
<p>上面的加密和解密其实是完全一样的算法，我这里只是为了演示，重复了一遍。<br>就这样我们轻轻松松就把我们的数据加密了，那么文件可以通过这种方式加密吗？当然可以，毕竟计算机里面储存的都是比特位，我下面给做一个简单的例子看一下。</p>
<h3 id="加密一张图片"><a href="#加密一张图片" class="headerlink" title="加密一张图片"></a>加密一张图片</h3><p><img src="/2017/02/19/加密算法之对称加密/jiami.jpg" alt="加密前的图片"></p>
<p>这个是加密前的图片</p>
<p><img src="/2017/02/19/加密算法之对称加密/jiami2.jpg" alt="加密key"></p>
<p>这张图用来做加密key</p>
<p>加密算法几乎和上面一致：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$file = <span class="string">'/Users/zhjx922/Downloads/jiami.jpg'</span>;</div><div class="line">$string = file_get_contents($file);</div><div class="line"><span class="comment">//被加密内容长度</span></div><div class="line">$stringLen = strlen($string);</div><div class="line"></div><div class="line">$file = <span class="string">'/Users/zhjx922/Downloads/jiami2.jpg'</span>;</div><div class="line">$key = file_get_contents($file);</div><div class="line"><span class="comment">//key长度</span></div><div class="line">$keyLen = strlen($key);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//如果加密key没有内容长，那么我们不断重复key，直到大于等于被加密内容(当然在实际使用中，这不是个好方法)</span></div><div class="line"><span class="keyword">if</span>($keyLen &lt; $stringLen) &#123;</div><div class="line">    $key = str_pad($key, $stringLen, $key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$content = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $stringLen; $i++) &#123;</div><div class="line">    $content .= chr(ord($string[$i]) ^ ord($key[$i]));</div><div class="line">&#125;</div><div class="line"></div><div class="line">file_put_contents(<span class="string">'jiami_content.jpg'</span>, $content);</div><div class="line"></div><div class="line">$string = file_get_contents(<span class="string">'jiami_content.jpg'</span>);</div><div class="line"></div><div class="line">$content = <span class="string">''</span>;</div><div class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $stringLen; $i++) &#123;</div><div class="line">    $content .= chr(ord($string[$i]) ^ ord($key[$i]));</div><div class="line">&#125;</div><div class="line"></div><div class="line">file_put_contents(<span class="string">'jiami_yuantu.jpg'</span>, $content);</div></pre></td></tr></table></figure>
<p>其中<code>jiami_content.jpg</code>为加密后的图片，但是根本打不开，这也说明这不是一个好的加密方法(因为不太了解jpg格式是如何储存的，如果你了解jpg的结构，调整算法，应该可以输出一张和原图完全不一样的图片)<br>而<code>jiami_yuantu.jpg</code>为解密后的图片，可以打开，完全和原图一样。</p>
<h3 id="关于DES-3DES、AES等算法"><a href="#关于DES-3DES、AES等算法" class="headerlink" title="关于DES,3DES、AES等算法"></a>关于DES,3DES、AES等算法</h3><p>这几天看了一下DES和3DES的算法原理(原理看似挺简单)，但是对应的算法实现没有看太明白，之后如有突破，会单独写篇文章分享。<br>还有一点就是，请慎重使用那些不公开的加密算法，毕竟这些公开算法相对经得起考验。前两天我在公司的代码库中看到一段加密函数，看似写的很高深，仔细读了一下，发现加密后的内容几乎不攻自破。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在互联网如此发达的年代，信息的安全也变得越来越重要，我们也使用了各式各样的加密手段来保护数据的安全，但是各种加密算法你真的了解它么？他们的原理又是什么呢？&lt;br&gt;常见的加密分为对称加密、非对称加密还有散列算法(严格来说，散列不算加密)，这篇文章我们来了解一下对称加密&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;传递甜甜蜜蜜小纸条&quot;&gt;&lt;a href=&quot;#传递甜甜蜜蜜小纸条&quot; class=&quot;headerlink&quot; title=&quot;传递甜甜蜜蜜小纸条&quot;&gt;&lt;/a&gt;传递甜甜蜜蜜小纸条&lt;/h3&gt;&lt;p&gt;穿越到初中的你，凭借着程序员”高贵”的气息成功的和一个小女生”勾搭”上了。&lt;br&gt;然而在那个不是谁都有手机的年代，上课的时候想和她传递信息，貌似只能写在纸上，然后借助同学之手，慢慢传递。最关键的是，万一某个同学好奇心太重偷偷看到你们的”甜甜蜜蜜”，你也许会不太爽吧？&lt;br&gt;作为一个从未来穿越回来的程序员，你立马在周末的时候买了两本班上谁都没有的大字典(康熙字典)，从此你俩的小纸条上出现的是如下的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;123:5 564:3 11:8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;665:2 123:3 456:6 789:2...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;123(代表页码):5(代表行)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从此之后，妹子再也不理你了(查字典太TM麻烦！)。。。&lt;br&gt;当然藏头诗也可以看做一种加密手段，前提是：你会写诗。。。&lt;/p&gt;
    
    </summary>
    
      <category term="加密算法" scheme="https://zhaojingxian.cn/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="加密算法" scheme="https://zhaojingxian.cn/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
      <category term="对称加密" scheme="https://zhaojingxian.cn/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
      <category term="DES" scheme="https://zhaojingxian.cn/tags/DES/"/>
    
      <category term="AES" scheme="https://zhaojingxian.cn/tags/AES/"/>
    
      <category term="3DES" scheme="https://zhaojingxian.cn/tags/3DES/"/>
    
  </entry>
  
  <entry>
    <title>inode介绍及用途</title>
    <link href="https://zhaojingxian.cn/2017/02/16/inode%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%94%A8%E9%80%94/"/>
    <id>https://zhaojingxian.cn/2017/02/16/inode介绍及用途/</id>
    <published>2017-02-16T06:38:16.000Z</published>
    <updated>2017-03-21T03:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Linux空间还有不少剩余，但有些时候会提示空间已满，这是为啥？</p>
</blockquote>
<h3 id="df查看空间"><a href="#df查看空间" class="headerlink" title="df查看空间"></a>df查看空间</h3><p>在日常使用中，有时候会发生如下情况，输入: <code>df</code>，显示如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">文件系统</th>
<th style="text-align:center">已用(I)%</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/dev/xvda1</td>
<td style="text-align:center">70%</td>
</tr>
</tbody>
</table>
<p>但是你创建文件或者文件夹的时候会提示你，空间已满！</p>
<p>输入：<code>df -i</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">文件系统</th>
<th style="text-align:center">已用(I)%</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/dev/xvda1</td>
<td style="text-align:center">100%</td>
</tr>
</tbody>
</table>
<p>问题就在这里，<code>-i</code>表示:显示inode信息而非块使用量，那么inode又是什么呢？</p>
<a id="more"></a>
<h3 id="inode"><a href="#inode" class="headerlink" title="inode"></a>inode</h3><p>inode中文意思为索引节点，这个索引的就是文件，我们知道Linux下一切皆为文件，inode记录的就是文件在硬盘获取其它设备上对应的储存位置。<br>文件名与目录名是便于使用的别名。一个文件系统对象可以有多个别名(比如软、硬连接)，但只能有一个inode，并用这个inode来索引文件系统对象的存储位置。<br>Linux中硬盘在格式化，后会将硬盘分为inode区、数据区、目录区。</p>
<ul>
<li>inode区记录的就是每个节点的节点类型、字节数、权限、创建时间等相关属性</li>
<li>数据区当然是数据真正储存的地方了</li>
<li>目录区记录的是目录下面文件的名称以及对应的inode</li>
</ul>
<p><strong>inode在生成分区的时候已经定义好了数量，如果inode使用完了，也就不能继续创建新的文件了</strong></p>
<h3 id="POSIX-inode"><a href="#POSIX-inode" class="headerlink" title="POSIX inode"></a>POSIX inode</h3><p>POSIX标准强制规范了文件系统的行为。每个“文件系统对象”必须具有：</p>
<ul>
<li>以字节为单位表示的文件大小。</li>
<li>设备ID，标识容纳该文件的设备。</li>
<li>文件所有者的User ID。</li>
<li>文件的Group ID</li>
<li>文件的模式（mode），确定了文件的类型，以及它的所有者、它的group、其它用户访问此文件的权限。</li>
<li>额外的系统与用户标志（flag），用来保护该文件。</li>
<li>3个时间戳，记录了inode自身被修改（ctime, inode change time）、文件内容被修改（mtime, modification time）、最后一次访问（atime, access time）的时间。</li>
<li>1个链接数，表示有多少个硬链接指向此inode。</li>
<li>到文件系统存储位置的指针。通常是1K字节或者2K字节的存储容量为基本单位。</li>
</ul>
<h3 id="查询inode属性"><a href="#查询inode属性" class="headerlink" title="查询inode属性"></a>查询inode属性</h3><p>执行<code>stat file</code>会输出类似如下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">文件：&quot;a.php&quot;</div><div class="line">  大小：4096      	块：8          IO 块：4096   目录</div><div class="line">设备：ca01h/51713d	Inode：276961      硬链接：2</div><div class="line">权限：(0755/drwxr-xr-x)  Uid：(    0/    root)   Gid：(    0/    root)</div><div class="line">最近访问：2017-02-18 17:16:02.916390626 +0800</div><div class="line">最近更改：2017-02-18 17:16:02.916390626 +0800</div><div class="line">最近改动：2017-02-18 17:16:02.916390626 +0800</div><div class="line">创建时间：-</div></pre></td></tr></table></figure>
<h3 id="使用inode删除文件"><a href="#使用inode删除文件" class="headerlink" title="使用inode删除文件"></a>使用inode删除文件</h3><p>有时候服务器上因为各种原因会生成一些名字很奇怪的文件或者目录，想删除掉的话，可以直接通过inode删除</p>
<p><code>ll -i</code>查看文件列表:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">276893 -rw-r--r--  1 root    root       0 2月  18 17:30 a.php</div><div class="line">268121 drwxr-xr-x  3 root    root    4096 2月  14 18:25 blog</div></pre></td></tr></table></figure>
<p>执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm `find -inum 276893` //通过find查询inode为276893的文件名，然后删除</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Linux空间还有不少剩余，但有些时候会提示空间已满，这是为啥？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;df查看空间&quot;&gt;&lt;a href=&quot;#df查看空间&quot; class=&quot;headerlink&quot; title=&quot;df查看空间&quot;&gt;&lt;/a&gt;df查看空间&lt;/h3&gt;&lt;p&gt;在日常使用中，有时候会发生如下情况，输入: &lt;code&gt;df&lt;/code&gt;，显示如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;文件系统&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;已用(I)%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;/dev/xvda1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;70%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;但是你创建文件或者文件夹的时候会提示你，空间已满！&lt;/p&gt;
&lt;p&gt;输入：&lt;code&gt;df -i&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;文件系统&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;已用(I)%&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;/dev/xvda1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;100%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;问题就在这里，&lt;code&gt;-i&lt;/code&gt;表示:显示inode信息而非块使用量，那么inode又是什么呢？&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://zhaojingxian.cn/categories/Linux/"/>
    
    
      <category term="inode" scheme="https://zhaojingxian.cn/tags/inode/"/>
    
      <category term="posix" scheme="https://zhaojingxian.cn/tags/posix/"/>
    
  </entry>
  
  <entry>
    <title>正确认识浮点数</title>
    <link href="https://zhaojingxian.cn/2017/02/15/%E6%AD%A3%E7%A1%AE%E8%AE%A4%E8%AF%86%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    <id>https://zhaojingxian.cn/2017/02/15/正确认识浮点数/</id>
    <published>2017-02-14T16:26:04.000Z</published>
    <updated>2017-03-21T03:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>大家在日常开发中，必然使用过浮点数，也会发现浮点数不是精确的，那究竟是什么原因造成的呢？</p>
</blockquote>
<h3 id="奇怪的结果"><a href="#奇怪的结果" class="headerlink" title="奇怪的结果"></a>奇怪的结果</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var_dump((<span class="number">1</span><span class="number">-0.9</span>) == <span class="number">0.1</span>);</div><div class="line"><span class="comment">//输出:bool(false)</span></div></pre></td></tr></table></figure>
<p>很奇怪吧！1-0.9怎么能不等于0.1呢？这是为什么呢？这要从浮点数的储存标准开始说。</p>
<h3 id="IEEE-754"><a href="#IEEE-754" class="headerlink" title="IEEE 754"></a>IEEE 754</h3><p>浮点数在计算机中是根据<code>IEEE 754</code>(二进制浮点数算数标准)储存的。<br>计算公式为: (-1)^S x M x 2^E</p>
<p>32位单精度储存结构(对应占位)</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号(S)</th>
<th style="text-align:center">阶码(E)</th>
<th style="text-align:center">尾数(M)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">8</td>
<td style="text-align:center">23</td>
</tr>
</tbody>
</table>
<p>64位双精度储存结构(对应占位)</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号(S)</th>
<th style="text-align:center">阶码(E)</th>
<th style="text-align:center">尾数(M)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">11</td>
<td style="text-align:center">52</td>
</tr>
</tbody>
</table>
<p>解释:</p>
<ul>
<li>S: 符号(0正，1负)</li>
<li>E: 阶码(指数)</li>
<li>M: 尾数(二进制小数,数字的实体部分)</li>
</ul>
<p>M(尾数)和E(阶码)不同情况需要分别对待</p>
<a id="more"></a>
<h3 id="E-阶码-的三种状态及对应的M表示"><a href="#E-阶码-的三种状态及对应的M表示" class="headerlink" title="E(阶码)的三种状态及对应的M表示"></a>E(阶码)的三种状态及对应的M表示</h3><p><img src="/2017/02/15/正确认识浮点数/exp.jpg" alt="exp"></p>
<p>从图中(截图于深入理解计算机系统)我们可以分为三种情况(第三种又分为两种特殊情况)</p>
<h4 id="规格化"><a href="#规格化" class="headerlink" title="规格化"></a>规格化</h4><p>E既不等于0也不等于255(将S按十进制计算)，这个时候的<code>E=E-127</code>，M的二进制小数默认省略了<code>1.</code>，也就是<code>M=1.M(二进制小数)</code><br>我们做一个简单的测试看一下二进制<code>00111110001000000000000000000000</code>(32位)表示的对应的浮点数为多少？</p>
<ul>
<li>首先拆分二进制: <code>0</code> <code>01111100</code> <code>01000000000000000000000</code></li>
<li>E = 124 = 124 - 127 = -3</li>
<li>M = 1.01000000000000000000000</li>
<li>套公式: 1 x 1.01000000000000000000000 x 2^-3 = 0.00101000000000000000000000 = 2^-3 + 2^-5 = 0.15625</li>
</ul>
<p>使用PHP验证一下结果：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var_dump(unpack(<span class="string">'f'</span>, pack(<span class="string">'l'</span>, bindec(<span class="string">'00111110001000000000000000000000'</span>)))[<span class="number">1</span>]);</div><div class="line"><span class="comment">//输出: float(0.15625)</span></div></pre></td></tr></table></figure>
<p>上面的例子没有丢失精度，下面看一个丢失精度的例子：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">printf(<span class="string">'%032s'</span>, decbin(unpack(<span class="string">'l'</span>, pack(<span class="string">'f'</span>, <span class="number">1</span>/<span class="number">3</span>))[<span class="number">1</span>]));</div><div class="line"><span class="comment">//输出: 00111110101010101010101010101011</span></div><div class="line"></div><div class="line">var_dump(unpack(<span class="string">'f'</span>, pack(<span class="string">'l'</span>, bindec(<span class="string">'00111110101010101010101010101011'</span>)))[<span class="number">1</span>]);</div><div class="line">float(<span class="number">0.33333334326744</span>)</div></pre></td></tr></table></figure>
<p>丢失精度最主要原因就在于M(二进制小数)，我们只能精确的表示2^n倍数的数(2^-1(0.5),2^-2(0.25),2^-3(0.125)…)，丢了在所难免。</p>
<h4 id="非规格化"><a href="#非规格化" class="headerlink" title="非规格化"></a>非规格化</h4><p>E等于0，这个时候<code>E=-126</code>，M的二进制小数前缀为<code>0.</code>，也就是<code>M=0.M(二进制小数)</code>，具体过程就不写了，和上面类似</p>
<h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p>E等于255(全部位都为1)，如果M全部为0，那么表示为无穷大，否则表示为NaN(不是一个数)</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var_dump(unpack(<span class="string">'f'</span>, pack(<span class="string">'l'</span>, bindec(<span class="string">'01111111100000000000000000000000'</span>)))[<span class="number">1</span>]);</div><div class="line"><span class="comment">//输出: float(INF)</span></div><div class="line"></div><div class="line">var_dump(unpack(<span class="string">'f'</span>, pack(<span class="string">'l'</span>, bindec(<span class="string">'01111111100000000000000000000110'</span>)))[<span class="number">1</span>]);</div><div class="line"><span class="comment">//输出: float(NAN)</span></div></pre></td></tr></table></figure>
<h3 id="不要比较浮点数"><a href="#不要比较浮点数" class="headerlink" title="不要比较浮点数"></a>不要比较浮点数</h3><p>总之，浮点数是不准确的。尤其在我们日常工作中，不要比较浮点数的大小，如果需要精确的比较计算，请使用<code>bc*</code>系列函数。<br>还有一点，浮点数不准确和PHP没有任何关系，PHP不背这个锅。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;大家在日常开发中，必然使用过浮点数，也会发现浮点数不是精确的，那究竟是什么原因造成的呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;奇怪的结果&quot;&gt;&lt;a href=&quot;#奇怪的结果&quot; class=&quot;headerlink&quot; title=&quot;奇怪的结果&quot;&gt;&lt;/a&gt;奇怪的结果&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var_dump((&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-0.9&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出:bool(false)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很奇怪吧！1-0.9怎么能不等于0.1呢？这是为什么呢？这要从浮点数的储存标准开始说。&lt;/p&gt;
&lt;h3 id=&quot;IEEE-754&quot;&gt;&lt;a href=&quot;#IEEE-754&quot; class=&quot;headerlink&quot; title=&quot;IEEE 754&quot;&gt;&lt;/a&gt;IEEE 754&lt;/h3&gt;&lt;p&gt;浮点数在计算机中是根据&lt;code&gt;IEEE 754&lt;/code&gt;(二进制浮点数算数标准)储存的。&lt;br&gt;计算公式为: (-1)^S x M x 2^E&lt;/p&gt;
&lt;p&gt;32位单精度储存结构(对应占位)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;符号(S)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;阶码(E)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;尾数(M)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;64位双精度储存结构(对应占位)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;符号(S)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;阶码(E)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;尾数(M)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;11&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;52&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;解释:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S: 符号(0正，1负)&lt;/li&gt;
&lt;li&gt;E: 阶码(指数)&lt;/li&gt;
&lt;li&gt;M: 尾数(二进制小数,数字的实体部分)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;M(尾数)和E(阶码)不同情况需要分别对待&lt;/p&gt;
    
    </summary>
    
      <category term="计算机原理" scheme="https://zhaojingxian.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="浮点数" scheme="https://zhaojingxian.cn/tags/%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    
      <category term="IEEE 754" scheme="https://zhaojingxian.cn/tags/IEEE-754/"/>
    
  </entry>
  
  <entry>
    <title>PHP中pack、unpack的用法</title>
    <link href="https://zhaojingxian.cn/2017/02/14/PHP%E4%B8%ADpack%E3%80%81unpack%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://zhaojingxian.cn/2017/02/14/PHP中pack、unpack的用法/</id>
    <published>2017-02-14T15:47:03.000Z</published>
    <updated>2017-03-21T03:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>PHP中有两个函数pack和unpack，很多PHPer在实际项目中从来没有使用过，甚至也不知道这两个方法是用来干嘛的。这篇文章来为大家介绍一下它俩到底是用来干啥的。</p>
</blockquote>
<h3 id="pack"><a href="#pack" class="headerlink" title="pack"></a>pack</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string pack ( string $format [, mixed $args [, mixed $... ]] )</div></pre></td></tr></table></figure>
<p>该函数用来将对应的参数(<code>$args</code>)打包成二进制字符串。</p>
<p>其中第一个参数$format，有如下选项(可选参数很多，后面会选几个常用的讲解)：</p>
<table>
<thead>
<tr>
<th>Code</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>以NUL字节填充字符串空白</td>
</tr>
<tr>
<td>A</td>
<td>以SPACE(空格)填充字符串</td>
</tr>
<tr>
<td>h</td>
<td>十六进制字符串，低位在前</td>
</tr>
<tr>
<td>H</td>
<td>十六进制字符串，高位在前</td>
</tr>
<tr>
<td>c</td>
<td>有符号字符</td>
</tr>
<tr>
<td>C</td>
<td>无符号字符</td>
</tr>
<tr>
<td>s</td>
<td>有符号短整型(16位，主机字节序)</td>
</tr>
<tr>
<td>S</td>
<td>无符号短整型(16位，主机字节序)</td>
</tr>
<tr>
<td>n</td>
<td>无符号短整型(16位，大端字节序)</td>
</tr>
<tr>
<td>v</td>
<td>无符号短整型(16位，小端字节序)</td>
</tr>
<tr>
<td>i</td>
<td>有符号整型(机器相关大小字节序)</td>
</tr>
<tr>
<td>I</td>
<td>无符号整型(机器相关大小字节序)</td>
</tr>
<tr>
<td>l</td>
<td>有符号长整型(32位，主机字节序)</td>
</tr>
<tr>
<td>L</td>
<td>无符号长整型(32位，主机字节序)</td>
</tr>
<tr>
<td>N</td>
<td>无符号长整型(32位，大端字节序)</td>
</tr>
<tr>
<td>V</td>
<td>无符号长整型(32位，小端字节序)</td>
</tr>
<tr>
<td>q</td>
<td>有符号长长整型(64位，主机字节序)</td>
</tr>
<tr>
<td>Q</td>
<td>无符号长长整型(64位，主机字节序)</td>
</tr>
<tr>
<td>J</td>
<td>无符号长长整型(64位，大端字节序)</td>
</tr>
<tr>
<td>P</td>
<td>无符号长长整型(64位，小端字节序)</td>
</tr>
<tr>
<td>f</td>
<td>单精度浮点型(机器相关大小)</td>
</tr>
<tr>
<td>d</td>
<td>双精度浮点型(机器相关大小)</td>
</tr>
<tr>
<td>x</td>
<td>NUL字节</td>
</tr>
<tr>
<td>X</td>
<td>回退一字节</td>
</tr>
<tr>
<td>Z</td>
<td>以NUL字节填充字符串空白(new in PHP 5.5)</td>
</tr>
<tr>
<td>@</td>
<td>NUL填充到绝对位置</td>
</tr>
</tbody>
</table>
<p>这么多参数看下来，我第一次是真心懵逼了，大部分说明都很好理解，但是其中的主机、大端、小端等字节序是什么鬼呢？接下里的内容比较枯燥，但必须理解才行，坚持吧。</p>
<a id="more"></a>
<h3 id="字节序是什么？"><a href="#字节序是什么？" class="headerlink" title="字节序是什么？"></a>字节序是什么？</h3><p>就是字节的顺序，说白了就是多字节数据的存放顺序(一个字节显然不需要顺序)。<br>比如<code>A</code>和<code>B</code>分别对应的二进制表示为<code>0100 0001</code>、<code>0100 0010</code>。对于储存字符串<code>AB</code>，我们可以<code>0100 0001 0100 0010</code>也可以<code>0100 0010 0100 0001</code>，这个顺序就是所谓的字节序。</p>
<h3 id="高-低位字节"><a href="#高-低位字节" class="headerlink" title="高/低位字节"></a>高/低位字节</h3><p>比如字符串<code>AB</code>，左高右低(我们正常的阅读顺序)，<code>A</code>为高字节，<code>B</code>为低字节</p>
<h3 id="高-低地址"><a href="#高-低地址" class="headerlink" title="高/低地址"></a>高/低地址</h3><p>假设0x123456是按从高位到底位的顺序储存，内存中是这样存放的：</p>
<p>高地址 -&gt; 低地址<br>12 -&gt; 34 -&gt; 56</p>
<h3 id="大端字节序-网络字节序"><a href="#大端字节序-网络字节序" class="headerlink" title="大端字节序(网络字节序)"></a>大端字节序(网络字节序)</h3><p>大端就是将高位字节放到内存的低地址端，低位字节放到高地址端。网络传输中(比如TCP/IP)低地址端(高位字节)放在流的开始，对于2个字节的字符串(<code>AB</code>)，传输顺序为：<code>A</code>(0-7bit)、<code>B</code>(8-15bit)。<br>那么小端字节序自然和大端相反。</p>
<h3 id="主机字节序"><a href="#主机字节序" class="headerlink" title="主机字节序"></a>主机字节序</h3><p>表示当年机器的字节序(也就是网络字节序是确定的，而主机字节序是依机器确定的)，<code>一般</code>为小端字节序。</p>
<h3 id="a和A-打包字符串，用NUL或者空格填充"><a href="#a和A-打包字符串，用NUL或者空格填充" class="headerlink" title="a和A(打包字符串，用NUL或者空格填充)"></a>a和A(打包字符串，用NUL或者空格填充)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'a6'</span>, <span class="string">'china'</span>);</div><div class="line">var_dump($string); <span class="comment">//输出结果: string(6) "china",最后一个字节是不可见的NUL</span></div><div class="line"><span class="keyword">echo</span> ord($string[<span class="number">5</span>]); <span class="comment">//输出结果: 0(ASCII码中0对应的就是nul)</span></div><div class="line"></div><div class="line"><span class="comment">//A同理</span></div><div class="line">$string = pack(<span class="string">'A6'</span>, <span class="string">'china'</span>);</div><div class="line">var_dump($string); <span class="comment">//输出结果: string(6) "china ",最后一个字节是空格</span></div><div class="line"><span class="keyword">echo</span> ord($string[<span class="number">5</span>]); <span class="comment">//输出结果: 32(ASCII码中32对应的就是空格)</span></div></pre></td></tr></table></figure>
<p><img src="/2017/02/14/PHP中pack、unpack的用法/ascii.jpg" alt="ASCII表"><br>附赠ASCII表一张(linux/unix下可以使用<code>man ascii</code>查看)</p>
<h3 id="h和H"><a href="#h和H" class="headerlink" title="h和H"></a>h和H</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'H3'</span>, <span class="number">281</span>);</div><div class="line">var_dump($string); <span class="comment">//输出结果: string(2) "("</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($string);$i++) &#123;</div><div class="line">    <span class="keyword">echo</span> ord($string[$i]) . PHP_EOL;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出结果: 40 16</span></div></pre></td></tr></table></figure>
<p>h和H需要特殊说明一下，它们是将对应的参数看做十六进制字符然后打包。什么意思呢？比如上面的<code>281</code>，打包前会将<code>281</code>转换为<code>0x281</code>，因为十六进制的一位对应二进制的四位，上面的<code>0x281</code>只有1.5个字节，后面会默认补0变成<code>0x2810</code>，0x28对应的十进制为40(<code>(</code>)，0x10对应的十进制为16(<code>dle</code>不可见字符)，懂了吧？不懂可以给我留言。。</p>
<h3 id="c和C"><a href="#c和C" class="headerlink" title="c和C"></a>c和C</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'c3'</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">-1</span>);</div><div class="line">var_dump($string); <span class="comment">//输出:string(3) "CD�"</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($string);$i++) &#123;</div><div class="line">    <span class="keyword">echo</span> ord($string[$i]) . PHP_EOL;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出: 67 68 225</span></div></pre></td></tr></table></figure>
<p>最后输出本能应该觉得是67 68 -1<br>ord获取的是字符的ASCII码(<code>范围0-255</code>)，这时<code>-1(0000 0001)</code>对应的字符将以补码的形式输出也就是<code>255(1111 1110 + 0000 0001 = 1111 1111)</code></p>
<h3 id="整型相关"><a href="#整型相关" class="headerlink" title="整型相关"></a>整型相关</h3><p>所有的整型类型使用方法完全一样，主要注意它们的位和字节序就可以了，下面以L作为例子展示</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'L'</span>, <span class="number">123456789</span>);</div><div class="line">var_dump($string); <span class="comment">//输出:string(4) "�["</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($string);$i++) &#123;</div><div class="line">    <span class="keyword">echo</span> ord($string[$i]) . PHP_EOL;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出: 21 205 91 7</span></div></pre></td></tr></table></figure>
<h3 id="f和d"><a href="#f和d" class="headerlink" title="f和d"></a>f和d</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'f'</span>, <span class="number">12345.123</span>);</div><div class="line">var_dump($string);</div><div class="line"><span class="comment">//输出:string(4) "~�@F"</span></div><div class="line"></div><div class="line">var_dump(unpack(<span class="string">'f'</span>, $string)); <span class="comment">//这里提前用到了unpack，后面会讲解</span></div><div class="line"><span class="comment">//输出:float(12345.123046875)</span></div></pre></td></tr></table></figure>
<p>f和d是针对浮点数打包，至于为什么打包前是<code>12345.123</code>解包后是<code>12345.123046875</code>，这个和浮点数的储存有关系，后面可以单开一个文章讲解一下IEEE标准</p>
<h3 id="x、X、Z、"><a href="#x、X、Z、" class="headerlink" title="x、X、Z、@"></a>x、X、Z、@</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'x'</span>); <span class="comment">//打包一个nul字符串</span></div><div class="line"><span class="keyword">echo</span> ord($string); <span class="comment">//输出: 0</span></div></pre></td></tr></table></figure>
<p>关于<code>X(大写X)</code>，试了N次，没搞明白怎么用，有清楚的童鞋可以给我留言，多谢。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'Z2'</span>, <span class="string">'abc5'</span>); <span class="comment">//其实就是将从Z后面的数字位置开始，全部设置为nul</span></div><div class="line">var_dump($string); <span class="comment">//输出:string(2) "a"</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($string);$i++) &#123;</div><div class="line">    <span class="keyword">echo</span> ord($string[$i]) . PHP_EOL;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出: 97 0</span></div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'@4'</span>); <span class="comment">//我理解为填充N个nul</span></div><div class="line">var_dump($string); <span class="comment">//输出: string(4) ""</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;strlen($string);$i++) &#123;</div><div class="line">    <span class="keyword">echo</span> ord($string[$i]) . PHP_EOL;</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出: 0 0 0 0</span></div></pre></td></tr></table></figure>
<h3 id="unpack"><a href="#unpack" class="headerlink" title="unpack"></a>unpack</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">array</span> unpack ( string $format , string $data )</div></pre></td></tr></table></figure>
<p>unpack的使用相当简单，就是讲pack打包的数据解包，打包的时候用的什么参数，就用什么参数解包，具体使用懒得说了，列几个小例子</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$string = pack(<span class="string">'L4'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</div><div class="line">var_dump(unpack(<span class="string">'L4'</span>, $string));</div><div class="line"><span class="comment">//输出:</span></div><div class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</div><div class="line">[<span class="number">1</span>]=&gt;</div><div class="line">int(<span class="number">1</span>)</div><div class="line">[<span class="number">2</span>]=&gt;</div><div class="line">int(<span class="number">2</span>)</div><div class="line">[<span class="number">3</span>]=&gt;</div><div class="line">int(<span class="number">3</span>)</div><div class="line">[<span class="number">4</span>]=&gt;</div><div class="line">int(<span class="number">4</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">$string = pack(<span class="string">'L4'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</div><div class="line">var_dump(unpack(<span class="string">'Ll1/Ll2/Ll3/Ll4'</span>, $string)); <span class="comment">//可以指定key，用/分割</span></div><div class="line"><span class="comment">//输出:</span></div><div class="line"><span class="keyword">array</span>(<span class="number">4</span>) &#123;</div><div class="line">[<span class="string">"l1"</span>]=&gt;</div><div class="line">int(<span class="number">1</span>)</div><div class="line">[<span class="string">"l2"</span>]=&gt;</div><div class="line">int(<span class="number">2</span>)</div><div class="line">[<span class="string">"l3"</span>]=&gt;</div><div class="line">int(<span class="number">3</span>)</div><div class="line">[<span class="string">"l4"</span>]=&gt;</div><div class="line">int(<span class="number">4</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="这两个函数到底有啥用途"><a href="#这两个函数到底有啥用途" class="headerlink" title="这两个函数到底有啥用途"></a>这两个函数到底有啥用途</h3><ul>
<li>数据通信(通过二进制格式与其它语言通信)</li>
<li>数据加密(如果不告诉第三方你的打包方式，对方解包的难度就相对很大)</li>
<li>节省空间(比如比较大的数字按字符串储存会浪费很多空间，打包成二进制格式才需要4位<32位数字>)</32位数字></li>
<li>自己去想吧</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;PHP中有两个函数pack和unpack，很多PHPer在实际项目中从来没有使用过，甚至也不知道这两个方法是用来干嘛的。这篇文章来为大家介绍一下它俩到底是用来干啥的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;pack&quot;&gt;&lt;a href=&quot;#pack&quot; class=&quot;headerlink&quot; title=&quot;pack&quot;&gt;&lt;/a&gt;pack&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;string pack ( string $format [, mixed $args [, mixed $... ]] )&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该函数用来将对应的参数(&lt;code&gt;$args&lt;/code&gt;)打包成二进制字符串。&lt;/p&gt;
&lt;p&gt;其中第一个参数$format，有如下选项(可选参数很多，后面会选几个常用的讲解)：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;以NUL字节填充字符串空白&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;以SPACE(空格)填充字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;十六进制字符串，低位在前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;十六进制字符串，高位在前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;有符号字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;无符号字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;有符号短整型(16位，主机字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;无符号短整型(16位，主机字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;无符号短整型(16位，大端字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v&lt;/td&gt;
&lt;td&gt;无符号短整型(16位，小端字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;有符号整型(机器相关大小字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;无符号整型(机器相关大小字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;td&gt;有符号长整型(32位，主机字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;无符号长整型(32位，主机字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;无符号长整型(32位，大端字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td&gt;无符号长整型(32位，小端字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;q&lt;/td&gt;
&lt;td&gt;有符号长长整型(64位，主机字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Q&lt;/td&gt;
&lt;td&gt;无符号长长整型(64位，主机字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;J&lt;/td&gt;
&lt;td&gt;无符号长长整型(64位，大端字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;无符号长长整型(64位，小端字节序)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td&gt;单精度浮点型(机器相关大小)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;双精度浮点型(机器相关大小)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;NUL字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;回退一字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;以NUL字节填充字符串空白(new in PHP 5.5)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@&lt;/td&gt;
&lt;td&gt;NUL填充到绝对位置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这么多参数看下来，我第一次是真心懵逼了，大部分说明都很好理解，但是其中的主机、大端、小端等字节序是什么鬼呢？接下里的内容比较枯燥，但必须理解才行，坚持吧。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://zhaojingxian.cn/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://zhaojingxian.cn/tags/PHP/"/>
    
      <category term="pack" scheme="https://zhaojingxian.cn/tags/pack/"/>
    
      <category term="unpack" scheme="https://zhaojingxian.cn/tags/unpack/"/>
    
  </entry>
  
</feed>
